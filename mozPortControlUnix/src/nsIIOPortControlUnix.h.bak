/*
 * DO NOT EDIT.  THIS FILE IS GENERATED FROM nsIIOPortControlUnix.idl
 */

#ifndef __gen_nsIIOPortControlUnix_h__
#define __gen_nsIIOPortControlUnix_h__


#ifndef __gen_nsISupports_h__
#include "nsISupports.h"
#endif

/* For IDL files that don't want to include root IDL files. */
#ifndef NS_NO_VTABLE
#define NS_NO_VTABLE
#endif

/* starting interface:    nsIIOPortControlUnix */
#define NS_IIOPORTCONTROLUNIX_IID_STR "1e887b6d-1d7e-4e66-9b14-ca4dacae9996"

#define NS_IIOPORTCONTROLUNIX_IID \
  {0x1e887b6d, 0x1d7e, 0x4e66, \
    { 0x9b, 0x14, 0xca, 0x4d, 0xac, 0xae, 0x99, 0x96 }}

class NS_NO_VTABLE nsIIOPortControlUnix : public nsISupports {
 public:

  NS_DEFINE_STATIC_IID_ACCESSOR(NS_IIOPORTCONTROLUNIX_IID)

  /* PRInt32 usleep (in PRInt64 time); */
  NS_IMETHOD Usleep(PRInt64 time, PRInt32 *_retval) = 0;

  /* PRInt32 iopl (in PRInt16 level); */
  NS_IMETHOD Iopl(PRInt16 level, PRInt32 *_retval) = 0;

  /* PRInt64 writePort (in PRInt64 portBaseAddr, in ACString writeBuffer, in PRInt64 length); */
  NS_IMETHOD WritePort(PRInt64 portBaseAddr, const nsACString & writeBuffer, PRInt64 length, PRInt64 *_retval) = 0;

  /* PRInt64 readPort (in PRInt64 portBaseAddr, out ACString readBuffer, in PRInt64 length); */
  NS_IMETHOD ReadPort(PRInt64 portBaseAddr, nsACString & readBuffer, PRInt64 length, PRInt64 *_retval) = 0;

  /* PRInt32 openPort (in PRInt64 portBaseAddr); */
  NS_IMETHOD OpenPort(PRInt64 portBaseAddr, PRInt32 *_retval) = 0;

  /* PRInt32 closePort (in PRInt64 portBaseAddr); */
  NS_IMETHOD ClosePort(PRInt64 portBaseAddr, PRInt32 *_retval) = 0;

  /* PRInt32 statusPort (in PRInt64 portBaseAddr); */
  NS_IMETHOD StatusPort(PRInt64 portBaseAddr, PRInt32 *_retval) = 0;

  /* PRInt64 hdwrResetDevice (in PRInt64 portBaseAddr); */
  NS_IMETHOD HdwrResetDevice(PRInt64 portBaseAddr, PRInt64 *_retval) = 0;

};

/* Use this macro when declaring classes that implement this interface. */
#define NS_DECL_NSIIOPORTCONTROLUNIX \
  NS_IMETHOD Usleep(PRInt64 time, PRInt32 *_retval); \
  NS_IMETHOD Iopl(PRInt16 level, PRInt32 *_retval); \
  NS_IMETHOD WritePort(PRInt64 portBaseAddr, const nsACString & writeBuffer, PRInt64 length, PRInt64 *_retval); \
  NS_IMETHOD ReadPort(PRInt64 portBaseAddr, nsACString & readBuffer, PRInt64 length, PRInt64 *_retval); \
  NS_IMETHOD OpenPort(PRInt64 portBaseAddr, PRInt32 *_retval); \
  NS_IMETHOD ClosePort(PRInt64 portBaseAddr, PRInt32 *_retval); \
  NS_IMETHOD StatusPort(PRInt64 portBaseAddr, PRInt32 *_retval); \
  NS_IMETHOD HdwrResetDevice(PRInt64 portBaseAddr, PRInt64 *_retval);

/* Use this macro to declare functions that forward the behavior of this interface to another object. */
#define NS_FORWARD_NSIIOPORTCONTROLUNIX(_to) \
  NS_IMETHOD Usleep(PRInt64 time, PRInt32 *_retval) { return _to Usleep(time, _retval); } \
  NS_IMETHOD Iopl(PRInt16 level, PRInt32 *_retval) { return _to Iopl(level, _retval); } \
  NS_IMETHOD WritePort(PRInt64 portBaseAddr, const nsACString & writeBuffer, PRInt64 length, PRInt64 *_retval) { return _to WritePort(portBaseAddr, writeBuffer, length, _retval); } \
  NS_IMETHOD ReadPort(PRInt64 portBaseAddr, nsACString & readBuffer, PRInt64 length, PRInt64 *_retval) { return _to ReadPort(portBaseAddr, readBuffer, length, _retval); } \
  NS_IMETHOD OpenPort(PRInt64 portBaseAddr, PRInt32 *_retval) { return _to OpenPort(portBaseAddr, _retval); } \
  NS_IMETHOD ClosePort(PRInt64 portBaseAddr, PRInt32 *_retval) { return _to ClosePort(portBaseAddr, _retval); } \
  NS_IMETHOD StatusPort(PRInt64 portBaseAddr, PRInt32 *_retval) { return _to StatusPort(portBaseAddr, _retval); } \
  NS_IMETHOD HdwrResetDevice(PRInt64 portBaseAddr, PRInt64 *_retval) { return _to HdwrResetDevice(portBaseAddr, _retval); }

/* Use this macro to declare functions that forward the behavior of this interface to another object in a safe way. */
#define NS_FORWARD_SAFE_NSIIOPORTCONTROLUNIX(_to) \
  NS_IMETHOD Usleep(PRInt64 time, PRInt32 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->Usleep(time, _retval); } \
  NS_IMETHOD Iopl(PRInt16 level, PRInt32 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->Iopl(level, _retval); } \
  NS_IMETHOD WritePort(PRInt64 portBaseAddr, const nsACString & writeBuffer, PRInt64 length, PRInt64 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->WritePort(portBaseAddr, writeBuffer, length, _retval); } \
  NS_IMETHOD ReadPort(PRInt64 portBaseAddr, nsACString & readBuffer, PRInt64 length, PRInt64 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->ReadPort(portBaseAddr, readBuffer, length, _retval); } \
  NS_IMETHOD OpenPort(PRInt64 portBaseAddr, PRInt32 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->OpenPort(portBaseAddr, _retval); } \
  NS_IMETHOD ClosePort(PRInt64 portBaseAddr, PRInt32 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->ClosePort(portBaseAddr, _retval); } \
  NS_IMETHOD StatusPort(PRInt64 portBaseAddr, PRInt32 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->StatusPort(portBaseAddr, _retval); } \
  NS_IMETHOD HdwrResetDevice(PRInt64 portBaseAddr, PRInt64 *_retval) { return !_to ? NS_ERROR_NULL_POINTER : _to->HdwrResetDevice(portBaseAddr, _retval); }

#if 0
/* Use the code below as a template for the implementation class for this interface. */

/* Header file */
class nsIOPortControlUnix : public nsIIOPortControlUnix
{
public:
  NS_DECL_ISUPPORTS
  NS_DECL_NSIIOPORTCONTROLUNIX

  nsIOPortControlUnix();

private:
  ~nsIOPortControlUnix();

protected:
  /* additional members */
};

/* Implementation file */
NS_IMPL_ISUPPORTS1(nsIOPortControlUnix, nsIIOPortControlUnix)

nsIOPortControlUnix::nsIOPortControlUnix()
{
  /* member initializers and constructor code */
}

nsIOPortControlUnix::~nsIOPortControlUnix()
{
  /* destructor code */
}

/* PRInt32 usleep (in PRInt64 time); */
NS_IMETHODIMP nsIOPortControlUnix::Usleep(PRInt64 time, PRInt32 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt32 iopl (in PRInt16 level); */
NS_IMETHODIMP nsIOPortControlUnix::Iopl(PRInt16 level, PRInt32 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt64 writePort (in PRInt64 portBaseAddr, in ACString writeBuffer, in PRInt64 length); */
NS_IMETHODIMP nsIOPortControlUnix::WritePort(PRInt64 portBaseAddr, const nsACString & writeBuffer, PRInt64 length, PRInt64 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt64 readPort (in PRInt64 portBaseAddr, out ACString readBuffer, in PRInt64 length); */
NS_IMETHODIMP nsIOPortControlUnix::ReadPort(PRInt64 portBaseAddr, nsACString & readBuffer, PRInt64 length, PRInt64 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt32 openPort (in PRInt64 portBaseAddr); */
NS_IMETHODIMP nsIOPortControlUnix::OpenPort(PRInt64 portBaseAddr, PRInt32 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt32 closePort (in PRInt64 portBaseAddr); */
NS_IMETHODIMP nsIOPortControlUnix::ClosePort(PRInt64 portBaseAddr, PRInt32 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt32 statusPort (in PRInt64 portBaseAddr); */
NS_IMETHODIMP nsIOPortControlUnix::StatusPort(PRInt64 portBaseAddr, PRInt32 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* PRInt64 hdwrResetDevice (in PRInt64 portBaseAddr); */
NS_IMETHODIMP nsIOPortControlUnix::HdwrResetDevice(PRInt64 portBaseAddr, PRInt64 *_retval)
{
    return NS_ERROR_NOT_IMPLEMENTED;
}

/* End of implementation class template. */
#endif


#endif /* __gen_nsIIOPortControlUnix_h__ */
