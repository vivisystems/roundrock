<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % bindingsDTD SYSTEM "chrome://viviecr/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="sync_status">
        <content>

		<xul:popupset>
		  <xul:panel anonid="statusPanel" position="after_start">
			<xul:label anonid="localIP" value=""/>
			<xul:label anonid="worldIP" value=""/>
                        <html:hr />
                        <html:div>
                            <html:pre anonid="serviceStatus">
                            </html:pre>
                        </html:div>
		  </xul:panel>
		</xul:popupset>

            <xul:image xbl:inherits="class" anonid="image" src="chrome://viviecr/skin/icons/sync_disabled.png" onclick="showStatusPanel(event);"/>

    
        </content>

        <xbl:implementation>

            <property name="image" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'image');" readonly="true"/>
	    <property name="statusPanel" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'statusPanel');" readonly="true"/>
	    <property name="localIP" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'localIP');" readonly="true"/>
	    <property name="worldIP" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'worldIP');" readonly="true"/>
            <property name="serviceStatus" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'serviceStatus');" readonly="true"/>

            <xbl:constructor>
                <![CDATA[

                    this.syncSettings = (new SyncSetting()).read();

                    this._online  = true;
                    this._process  = false;

                    // prepare hostname
                    this._hosts = {};
                    this._services = {};
                    for (var service in this.syncSettings) {
                        if (service.indexOf('hostname') != -1) {
                            this._hosts[this.syncSettings[service]] = false;
                            this._services[service] = this.syncSettings[service];
                        }
                    }
                    if (this.syncSettings /*&& this.syncSettings.active == 1*/) {

                        this.username = 'vivipos';
                        this.password = this.syncSettings.password ;

                        if (this.syncSettings.hostname == 'localhost' || this.syncSettings.hostname == '127.0.0.1') {
                            this._hosts[this.syncSettings.hostname] = true;
                            this.setStatus(true);
                            if(GeckoJS.BaseObject.getKeys(this._hosts).length > 1 ) {
                                this._onTimer();
                            }
                        }else {
                            this.setStatus(false); // set offline default
                            this._onTimer();
                        }
                    }

                    /*
                    var self = this;

                    this.observer = GeckoJS.Observer.newInstance({
                        topics: ['sync_client_starting', 'sync_client_finished'],
                        observe: function(aSubject, aTopic, aData) {

                            switch(aTopic) {
                                case 'sync_client_starting':
                                    GeckoJS.Session.set('sync_client_status', 'starting');
                                    self.setProcess(true);
                                    break;

                                case 'sync_client_finished':
                                    GeckoJS.Session.set('sync_client_status', 'finished');
                                    self.setProcess(false);
                                    break;
                            }
                        }
                    }).register();
                    */


                ]]>
            </xbl:constructor>

            <xbl:destructor>
                <![CDATA[
                if(this.timerId) clearTimeout(this.timerId);
                //this.observer.unregister();
                ]]>
            </xbl:destructor>

            <method name="getAuth">
                <parameter name="hostname" />
                <body>
                    <![CDATA[

                        var self = this;
                        var hosts = this._hosts;

                        if (hostname =='localhost' || hostname == '' || hostname == '127.0.0.1') {

                            // dump('request localhost , return true \n');
                            hosts[hostname] = true;
                            self.setStatus(true);
                            return true;
                        }

                        // check connection status
                        var url =   this.syncSettings.protocol + '://' +
                                    hostname + ':' +
                                    this.syncSettings.port + '/' +
                                    'syncs/auth/' +
                                    this.syncSettings.machine_id ;


                        var username = this.username ;
                        var password = this.password ;

                        var req = new XMLHttpRequest();

                        req.mozBackgroundRequest = true;

                        /* Request Timeout guard */
                        var timeout = null;
                        timeout = setTimeout(function() {
                            clearTimeout(timeout);
                            req.abort();
                        }, 15000);

                        /* Start Request with http basic authorization */
                        req.open('GET', url, true);
                        req.setRequestHeader('Authorization', 'Basic ' + btoa(username +':'+password));
                        req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                        req.setRequestHeader('X-Vivipos-Machine-Id', this.syncSettings.machine_id);
                        //dump('request ' + url + '\n');

                        req.onreadystatechange = function (aEvt) {
                            if (req.readyState == 4) {
                                if(req.status == 200) {
                                    var server_machine_id = req.responseText;
                                    if(server_machine_id) {
                                        //dump('hostname: ' + hostname + ' , ' + server_machine_id + '\n');
                                        hosts[hostname] = true;
                                        self.setStatus(true);
                                    }else {
                                        //dump('hostname: ' + hostname + ' ,  false, status: 200 \n');
                                        hosts[hostname] = false;
                                        self.setStatus(false);
                                    }
                                }else {
                                    //dump('hostname: ' + hostname + ' , false, status: ' + req.status +'\n');
                                    hosts[hostname] = false;
                                    self.setStatus(false);
                                }
                                delete req;
                            }
                        };
                        req.send(null);

                    ]]>
                </body>
            </method>


            <method name="checkStatus">
                <body>
                    <![CDATA[

                     //dump('checkStatus next 180 secs \n');
                     var self = this;
                     this.timerId = setTimeout(function() {
                        self._onTimer();
                     }, 60000*3);

                    ]]>
                </body>
            </method>


            <method name="_onTimer">
                <body>
                    <![CDATA[
                    var self = this;

                    if(this.timerId) clearTimeout(this.timerId);

                    //dump(GeckoJS.BaseObject.dump(this._hosts));

                    for (var hostname in this._hosts) {
                        this.getAuth(hostname);
                    }

                    this.checkStatus();


                    ]]>
                </body>
            </method>

            <method name="setStatus">
                <parameter name="isOnline" />
                <body>
                    <![CDATA[

                    this._online = isOnline;
                    var isProcess = this._process ;

                    var image = this.image ;

                    if (isOnline) {
                        if (isProcess) {
                            image.src = "chrome://viviecr/skin/icons/sync_process.png";
                        }else {

                            // check all services online
                            var allOnLine = true;
                            for (var hostname in this._hosts) {
                                allOnLine = allOnLine & this._hosts[hostname] ;
                            }

                            if (allOnLine) {
                                image.src = "chrome://viviecr/skin/icons/sync_online.png";
                            }else {
                                image.src = "chrome://viviecr/skin/icons/sync_offline.png";
                            }
                        }
                    }else {
                        if (image.src != 'chrome://viviecr/skin/icons/sync_offline.png') {
                            image.src = "chrome://viviecr/skin/icons/sync_offline.png";
                        }
                    }

                    ]]>
                </body>
            </method>

            <method name="setProcess">
                <parameter name="isProcess" />
                <body>
                    <![CDATA[

                    this._process = isProcess;

                    var isOnline = this._online;

                    this.setStatus(isOnline);

                    ]]>
                </body>
            </method>


            <method name="showStatusPanel">
                <parameter name="event" />
                <body>
                    <![CDATA[

			this.getMyIP();
		        this.getWorldIP();
			this.statusPanel.openPopup(this.image, "before_end", 0, 0, false, false);
                        try {
                            var serviceStatus = this.serviceStatus;
                            var buf = "";
                            for (var service in this._services) {
                                //dump(_('sync_settings.'+service));
                                buf += _('sync_settings.'+service) + ': ' + this._services[service] + ' ' + (this._hosts[this._services[service]] ? _('sync_settings.status.connected') : _('sync_settings.status.disconnect') ) + ' \n';
                            }
                            //dump(buf);
                            this.serviceStatus.textContent = buf;
                        }catch(e) {
                            dump(e);
                        }

			event.stopPropagation();

                    ]]>
                </body>
            </method>


            <method name="getMyIP">
                <body>
                    <![CDATA[

			var localIP = "127.0.0.1";

			var prog = "/bin/sh"; 
			var output = "/tmp/eth0_inet.txt";
			var cmd_opts = "ifconfig eth0 | grep \"inet addr\"> " + output;

			GREUtils.File.run(prog, ["-c", cmd_opts], true);

			var lines = GREUtils.File.readAllBytes(output);

			var m = lines.match(/inet addr:(.*) B/);

			if(m && m.length >=2 ) localIP = m[1];

			this.localIP.value = localIP;			

                    ]]>
                </body>
            </method>

            <method name="getWorldIP">
                <body>
                    <![CDATA[

			var myip = ""; var myland = "";

			var worldIP = this.worldIP;
			
			var req = new XMLHttpRequest();
			req.open("GET", "http://vivipos-services.appspot.com/services/remote_addr", true);
			req.setRequestHeader("Accept", "text/html,text/plain");
			req.setRequestHeader("Accept-Encoding", null);
			req.setRequestHeader("Keep-Alive", null);
			req.setRequestHeader("Accept-Charset", null);
			req.setRequestHeader("Connection", "close");
                        req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
			
			req.onreadystatechange = function()
			{
				if (req.readyState == 4)
				{
					var doc = req.responseText;
					try
					{
						var myData = doc.split("<br>");
						myip = myData[0].substring(0,15);
						myland = myData[1].substring(0,2);
					}
					catch(e)
					{
						myip = "";
						myland = "";
					}
					worldIP.value = myip;
				}
			};
			req.send(null);
			return true;
	
                    ]]>
                </body>
            </method>


        </xbl:implementation>

    </binding>
</bindings>
