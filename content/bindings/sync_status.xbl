<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % bindingsDTD SYSTEM "chrome://viviecr/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="sync_status">
        <content>

		<xul:popupset>
		  <xul:panel anonid="statusPanel" position="after_start">
			<xul:label anonid="localIP" value=""/>
			<xul:label anonid="worldIP" value=""/>
		  </xul:panel>
		</xul:popupset>

            <xul:image xbl:inherits="class" anonid="image" src="chrome://viviecr/skin/icons/sync_disabled.png" onclick="showStatusPanel(event);"/>

    
        </content>

        <xbl:implementation>

            <property name="image" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'image');" readonly="true"/>
	    <property name="statusPanel" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'statusPanel');" readonly="true"/>
	    <property name="localIP" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'localIP');" readonly="true"/>
	    <property name="worldIP" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'worldIP');" readonly="true"/>

            <xbl:constructor>
                <![CDATA[

                    this.syncSettings = (new SyncSetting()).read();

                    if (this.syncSettings && this.syncSettings.active == 1) {

                        // check connection status
                        this.url = this.syncSettings.protocol + '://' +
                                    this.syncSettings.hostname + ':' +
                                    this.syncSettings.port + '/' +
                                    'syncs/auth/' + 
                                    this.syncSettings.machine_id ;

                        this.username = 'vivipos';
                        this.password = this.syncSettings.password ;

                        this.setStatus(false); // set offline default
                        this._onTimer();
                    }

                ]]>
            </xbl:constructor>

            <xbl:destructor>
                <![CDATA[
                if(this.timerId) clearTimeout(this.timerId);
                ]]>
            </xbl:destructor>

            <method name="checkStatus">
                <body>
                    <![CDATA[

                     var self = this;
                     this.timerId = setTimeout(function() {
                        self._onTimer();
                     }, 60000);

                    ]]>
                </body>
            </method>


            <method name="_onTimer">
                <body>
                    <![CDATA[
                    var self = this;

                    if(this.timerId) clearTimeout(this.timerId);
                    
                    var url = this.url;
                    var username = this.username ;
                    var password = this.password ;

                    var req = new XMLHttpRequest();

                    req.mozBackgroundRequest = true;

                    /* Request Timeout guard */
                    var timeout = null;
                    timeout = setTimeout(function() {
                        clearTimeout(timeout);
                        req.abort();
                    }, 15000);

                    /* Start Request with http basic authorization */
                    req.open('GET', url, true, username, password);
                    req.onreadystatechange = function (aEvt) {
                        if (req.readyState == 4) {
                            if(req.status == 200) {
                                var server_machine_id = req.responseText;
                                if(server_machine_id) {
                                    self.setStatus(true);
                                }else {
                                    self.setStatus(false);
                                }
                            }else {
                                self.setStatus(false);
                            }
                            delete req;
                            self.checkStatus(); // register again
                        }
                    };
                    req.send(null);

                    ]]>
                </body>
            </method>

            <method name="setStatus">
                <parameter name="isOnline" />
                <body>
                    <![CDATA[

                    var image = this.image ;

                    if (isOnline) {
                        if (image.src != 'chrome://viviecr/skin/icons/sync_online.png') {
                            image.src = "chrome://viviecr/skin/icons/sync_online.png";
                        }
                    }else {
                        if (image.src != 'chrome://viviecr/skin/icons/sync_offline.png') {
                            image.src = "chrome://viviecr/skin/icons/sync_offline.png";
                        }
                    }

                    ]]>
                </body>
            </method>

            <method name="showStatusPanel">
                <parameter name="event" />
                <body>
                    <![CDATA[

			this.getMyIP();
		        this.getWorldIP();

			this.statusPanel.openPopup(this.image, "before_end", 0, 0, false, false);

			event.stopPropagation();

                    ]]>
                </body>
            </method>


            <method name="getMyIP">
                <body>
                    <![CDATA[

			var localIP = "127.0.0.1";

			var prog = "/bin/sh"; 
			var output = "/tmp/eth0_inet.txt";
			var cmd_opts = "ifconfig eth0 | grep \"inet addr\"> " + output;

			GREUtils.File.run(prog, ["-c", cmd_opts], true);

			var lines = GREUtils.File.readAllBytes(output);

			var m = lines.match(/inet addr:(.*) B/);

			if(m && m.length >=2 ) localIP = m[1];

			this.localIP.value = localIP;			

                    ]]>
                </body>
            </method>

            <method name="getWorldIP">
                <body>
                    <![CDATA[

			var myip = ""; var myland = "";

			var worldIP = this.worldIP;
			
			var req = new XMLHttpRequest();
			req.open("GET", "http://api.wipmania.com/", true);
			req.setRequestHeader("Accept", "text/html,text/plain");
			req.setRequestHeader("Accept-Encoding", null);
			req.setRequestHeader("Keep-Alive", null);
			req.setRequestHeader("Accept-Charset", null);
			req.setRequestHeader("Connection", "close");
			
			req.onreadystatechange = function()
			{
				if (req.readyState == 4)
				{
					var doc = req.responseText;
					try
					{
						var myData = doc.split("<br>");
						myip = myData[0].substring(0,15);
						myland = myData[1].substring(0,2);
					}
					catch(e)
					{
						myip = "";
						myland = "";
					}
					worldIP.value = myip;
				}
			};
			req.send(null);
			return true;
	
                    ]]>
                </body>
            </method>


        </xbl:implementation>

    </binding>
</bindings>
