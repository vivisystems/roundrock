<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % bindingsDTD SYSTEM "chrome://viviecr/locale/bindings.dtd">
  %bindingsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="button_colorpicker">
  <resources>
  	<stylesheet src="chrome://viviecr/skin/buttons.css" />
  </resources>

  <content>
    <xul:box xbl:inherits="flex,orient" anonid="boxContainer">
        <xul:hbox flex="1">
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-default.label;" color="default" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-1.label;" color="1" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-2.label;" color="2" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-3.label;" color="3" />
        </xul:hbox>
        <xul:hbox flex="1">
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-4.label;" color="4" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-5.label;" color="5" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-6.label;" color="6" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-7.label;" color="7" />
        </xul:hbox>
        <xul:hbox flex="1">
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-8.label;" color="8" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-9.label;" color="9" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-10.label;" color="10" />
            <xul:button flex="1" xbl:inherits="disabled,class=buttonClass" label="&button-11.label;" color="11" />
        </xul:hbox>
  </xul:box>
  </content>

  <xbl:implementation>


    <field name="_color" >false</field>
    <property name="boxContainer" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'boxContainer');" readonly="true"/>

    <property name="disabled" onget="return this.hasAttribute('disabled') ?  this.getAttribute('disabled').toUpperCase() == 'TRUE' : false;" onset="return this.setAttribute('disabled', val); return val; " />
    <property name="color" onget="return this.getColor();" onset="return this.setColor(val);" />
    <property name="value" onget="return this.color;" onset="return this.color = val;" />

	<xbl:constructor><![CDATA[
        var buttons = this.boxContainer.getElementsByTagNameNS('http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul', 'button');
        var classprefix = this.getAttribute('class-prefix') || 'button-';
        for (var i = 0; i < buttons.length; i++) {
            var color = buttons[i].getAttribute('color');
            buttons[i].className += (buttons[i].className ? " " : "") + classprefix + color;
            buttons[i].setAttribute('color', classprefix + color);
        }

        this.addEventListener('DOMAttrModified', this._attrmodified, true);
         ]]>
	</xbl:constructor>

    <xbl:destructor>
    this.removeEventListener('DOMAttrModified', this._attrmodified, true);
    </xbl:destructor>

    <method name="getColor">
      <body><![CDATA[
        return this._color || "";
      ]]>
      </body>
    </method>


    <method name="setColor">
      <parameter name="color"/>
      <body><![CDATA[

        var oldColor = this._color;
        var oldBtn = null;
        var newBtn = null;
        if(oldColor) {
            oldBtn = document.getAnonymousElementByAttribute(this, "color", oldColor);
            if(oldBtn) oldBtn.removeAttribute('selected');
        }

        newBtn = document.getAnonymousElementByAttribute(this, "color", color);

        if (newBtn) {
            newBtn.setAttribute('selected', true);
            this._color = color;
            this._fireEvent(this, "select");
        }

      ]]>
      </body>
    </method>

     <method name="_fireEvent">
        <parameter name="aTarget"/>
        <parameter name="aEventName"/>
        <body>
        <![CDATA[
          try {
            var event = document.createEvent("Events");
            event.initEvent(aEventName, true, true);
            var cancel = !aTarget.dispatchEvent(event);
            if (aTarget.hasAttribute("on" + aEventName)) {
              var fn = new Function ("event", aTarget.getAttribute("on" + aEventName));
              var rv = fn.call(aTarget, event);
              if (rv == false)
                cancel = true;
            }
            return !cancel;
          }
          catch (e) {
            Components.utils.reportError(e);
          }
          return false;
        ]]>
        </body>
      </method>


    <method name="_attrmodified">
      <parameter name="event"/>
      <body><![CDATA[

        let value = event.newValue;
        let attr = event.attrName;

        switch (attr) {

            case 'value':
            case 'color':
                this.setColor(value);
            break;

        }

      ]]>
      </body>
    </method>



  </xbl:implementation>

   <handlers>

      <handler event="click"><![CDATA[
        if (event.originalTarget.hasAttribute("color") && !event.target.disabled) {
          this.setColor(event.originalTarget.getAttribute('color'));
        }
      ]]></handler>

   </handlers>

</binding>

</bindings>
