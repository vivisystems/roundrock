#!/bin/sh
#
# ROUNDROCK provisioning tool
#
# irving.hsu@vivisystems.com.tw
#
LANG=en
LC_ALL=c

: ${DIALOG=dialog}

DIALOG_OPTS="--backtitle PROVISIONING"
MAX_WIDTH=80
MAX_HEIGHT=24


# license related variables
LICENSE_FILE=/etc/vivipos.lic
LICENSE_SIGNER=makelic
TOOLS_LABEL=ROUNDROCK_TOOLS
MEDIA="/media/$TOOLS_LABEL"


# initramfs related parameters
CRYPT_KEY_FILE=crypt-key
CRYPT_KEY_PATH=/etc
INITRAMFS=/boot/initrd.img-2.6.32-25-generic


# GRUB related parameters
GRUB_DIRECTORY=/etc/grub.d
PROVISIONING_GRUB_ENTRY=06_roundrock_provisioning
GRUB_UPDATE_SCRIPT=update-grub


# support center variables
SUPPORT_FQDN_FILE=/etc/support.site
DEFAULT_SUPPORT_FQDN="support.vivisystems.com.tw"
SUPPORT_FQDN="$DEFAULT_SUPPORT_FQDN"
SSL_CERTIFICATE=/etc/roundrock.pem
SSL_CA_CERTIFICATE=/etc/ca-certificates/ca-cert.pem


# serial number config
SERIAL_NUMBER_READER=/data/vivipos_sdk/getSystemLicenseStub
SERIAL_NUMBER=""


# data for 3.5G modem
MODEM_MARKER=/tmp/3g-modem.device.gnokii
GNOKII=gnokii
WVDIAL=wvdial

MODEM_IMEI=""

SIM_PLMN=""
SIM_PIN=""
PIN_FILE=/etc/modem.pin
WVDIAL_CONF=/etc/wvdial.conf
DEFAULT_PIN="0000"

# file to store system details
LSHW=lshw
SYSINFO_FILE=/tmp/system.$$
SYSINFO_BASE64=""
MODEL_FILE=/etc/MODEL
MODEL="Unknown"

################################################################################################################

determine_window_size() {
    DIMENSIONS=`$DIALOG --print-maxsize --stdout | sed "s/.*MaxSize: \(.*\), \(.*\)/\1,\2/g"`
    MAX_WIDTH=`echo $DIMENSIONS | awk -F"," '{print $2}'`
    MAX_HEIGHT=`echo $DIMENSIONS | awk -F"," '{print $1}'`
}

################################################################################################################

provision_failed() {
    [ -f "${LICENSE_FILE}".$$ ] && rm -f "${LICENSE_FILE}".$$
    [ -f "${PIN_FILE}".$$ ] && rm -f "${PIN_FILE}".$$
    [ -f "$SUPPORT_FQDN_FILE".$$ ] && rm -f "$SUPPORT_FQDN_FILE".$$
    [ -f /tmp/initrd.$$ ] && rm -f /tmp/initrd.$$

    sync

    $DIALOG $DIALOG_OPTS --title "PROVISIONING ERROR" --msgbox "Failure Reason\n--------------\n\n$2" $1 $MAX_WIDTH
    exit 1
}

################################################################################################################

handle_trap() {
    provision_failed  9 "User Interrupt"
}

trap handle_trap INT QUIT

################################################################################################################

check_tool_disk() {

    local DEVNAME

    # if volume is detected, trigger auto mount
    DEVNAME=`udevadm info --query=name --name=disk/by-label/${TOOLS_LABEL}`
    if [ -n "$DEVNAME" ]; then
	udevadm trigger --subsystem-match=block --action=add --sysname="$DEVNAME"
    fi

    # check if USB thumb drive with license signer is available
    if [ -r "$MEDIA/$LICENSE_SIGNER" ]; then
        return 0
    else
        return 1
    fi
}

################################################################################################################

sign_license() {

    local TITLE

    TITLE="GENERATE LICENSE"

    check_tool_disk

    while [ $? -eq 1 ]; do
        $DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "Please insert USB thumb drive with the license generator tool" 4 $MAX_WIDTH

        check_tool_disk
    done

    # change directory to external media
    cd "$MEDIA"

    local SUCCESS=1

    while [ $SUCCESS -ne 0 ]; do

	rm -f "$LICENSE_FILE"

        sh -e "$LICENSE_SIGNER" 2>&1 | $DIALOG $DIALOG_OPTS --progressbox "Generating license..." 8 $MAX_WIDTH

        SUCCESS=$?

        if [ $SUCCESS -eq 0 ]; then
	    mv ${LICENSE_FILE} ${LICENSE_FILE}.$$
            $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "License successfully generated" 4 $MAX_WIDTH
        else
            $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "Error encountered while executing [$LICENSE_SIGNER]\n\nPlease check the license generator and retry" 6 $MAX_WIDTH
        fi
    done
}

################################################################################################################

update_support_center_fqdn() {

    local TITLE="SUPPORT CENTER LOCATION"

    if [ -r "$SUPPORT_FQDN_FILE" ]; then
        SUPPORT_FQDN=`cat "$SUPPORT_FQDN_FILE"`
    else
        SUPPORT_FQDN="$DEFAULT_SUPPORT_FQDN"
    fi

    local SUCCESS=1

    while [ $SUCCESS -ne 0 ]; do

        SUPPORT_FQDN=`$DIALOG $DIALOG_OPTS --title "${TITLE}" --nocancel --stdout --inputbox "Please update fully qualified support center domain name if necessary" 6 $MAX_WIDTH "$SUPPORT_FQDN"`

        if [ -z "$SUPPORT_FQDN" ]; then
            $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "Support center domain name must not be empty" 4 $MAX_WIDTH
        else
            SUCCESS=0
        fi

    done

    # store support center FQDN in $SUPPORT_FQDN_FILE
    echo -n $SUPPORT_FQDN > "$SUPPORT_FQDN_FILE.$$"
}

################################################################################################################

get_serial_number() {

    local SUCCESS=1
    local TITLE="SYSTEM SERIAL NUMBER"

    while [ $SUCCESS -ne 0 ]; do

        { $SERIAL_NUMBER_READER > /tmp/sn.$$ ; } 2>&1 \
	| $DIALOG $DIALOG_OPTS --progressbox "Retrieving system serial number..." 8 $MAX_WIDTH

	SERIAL_NUMBER=`cat /tmp/sn.$$`
	
        if [ -z "$SERIAL_NUMBER" ]; then
            $DIALOG $DIALOG_OPTS --title "${TITLE}" --yes-label "Retry" --no-label "Cancel" --yesno "Failed to retrieve system serial number" 4 $MAX_WIDTH
            if [ $? -ne 0 ]; then
                return 1
            fi
        else
            $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "System serial number successfully retrieved\n\n$SERIAL_NUMBER" 7 $MAX_WIDTH
            SUCCESS=0
        fi
    done
}


################################################################################################################

get_system_details() {

    local TITLE

    TITLE="SYSTEM DETAILS"

    ${LSHW} -short > "$SYSINFO_FILE" 2>/dev/null \
    | $DIALOG $DIALOG_OPTS --progressbox "Collecting system details..." 4 $MAX_WIDTH

    # generate base64 encoding of system details
    SYSINFO_BASE64=`base64 -w 0 "$SYSINFO_FILE"`

    # retrieve software version
    if [ -r $MODEL_FILE ]; then
	MODEL=`cat $MODEL_FILE`;
    fi

    echo >> $SYSINFO_FILE
    echo >> $SYSINFO_FILE
    echo "Model: $MODEL" >> $SYSINFO_FILE

    $DIALOG $DIALOG_OPTS --title "${TITLE}" --exit-label OK --textbox "$SYSINFO_FILE" $((MAX_HEIGHT - 5)) $MAX_WIDTH
}

################################################################################################################

validate_plmn() {
    REGEX="s/[0-9]//g"
    RESIDUE=`echo $1 | sed $REGEX`
    if [ ${#1} -eq 10 -a -z "$RESIDUE" ]; then
        return 0
    else
        return 1
    fi
}

################################################################################################################

validate_pin() {
    REGEX="s/[0-9]//g"
    RESIDUE=`echo $1 | sed $REGEX`
    if [ ${#1} -eq 4 -a -z "$RESIDUE" ]; then
        return 0
    else
        return 1
    fi
}

################################################################################################################

unlock_sim_with_pin() {

    local SUCCESS
    local STATUS
    local TITLE

    TITLE="WIRELESS MODEM - UNLOCK SIM"

    # get DEFAULT PIN
    if [ -r "${PIN_FILE}" ]; then
        DEFAULT_PIN=`cat "${PIN_FILE}"`
    fi
    # prompt for SIM PIN code
    SUCCESS=1
    STATUS=`$GNOKII --getsecuritycodestatus 2>/dev/null | grep "Security code status:" | awk -F': ' '{print $2}'`
    while [ $SUCCESS -ne 0 ]; do
	DEFAULT_PIN=`$DIALOG $DIALOG_OPTS --title "$TITLE" --nocancel --stdout --inputbox "Please enter PIN code (current status: $STATUS)" 6 $MAX_WIDTH "$DEFAULT_PIN"`

	# validate PIN
	validate_pin $DEFAULT_PIN
	if [ $? -eq 0 ]; then

	    # check if waiting for PIN
	    if [ "$STATUS" != "nothing to enter." ]; then

                # update unlock dialer
                REG_WVDIAL="s/\(^Init9\s=\s\AT+CPIN=\).*/\1${DEFAULT_PIN}/g"
                sed ${REG_WVDIAL} ${WVDIAL_CONF} > ${WVDIAL_CONF}.$$
                mv -f ${WVDIAL_CONF}.$$ ${WVDIAL_CONF}

                # unlock
                ${WVDIAL} unlock 2>&1 | $DIALOG $DIALOG_OPTS --progressbox "Unlocking SIM..." 12 $MAX_WIDTH

                # check if unlocked
                STATUS=`$GNOKII --getsecuritycodestatus 2>/dev/null | grep "Security code status:" | awk -F': ' '{print $2}'`
                if [ "$STATUS" = "nothing to enter." ]; then
                    $DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "SIM successfully unlocked" 4 $MAX_WIDTH
                    SUCCESS=0
                else
                    $DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "Failed to unlock SIM with PIN [$DEFAULT_PIN]\n\nStatus: $STATUS" 6 $MAX_WIDTH
                fi
	    else
		SUCCESS=0
            fi
	else
	    $DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "Invalid PIN code [$DEFAULT_PIN]" 4 $MAX_WIDTH
	fi
    done

}

################################################################################################################

verify_plmn() {

    local SUCCESS
    local RESEND
    local TITLE

    TITLE="WIRELESS MODEM - VERIFY"
    RESEND=1

    while [ $RESEND -ne 0 ]; do
	# prompt for target mobile number
	SUCCESS=1
	while [ $SUCCESS -ne 0 ]; do
	    TARGET_PLMN=`$DIALOG $DIALOG_OPTS --title "$TITLE" --nocancel --stdout --inputbox "Please enter target mobile number" 6 $MAX_WIDTH`

	    # validate mobile number
	    validate_plmn $TARGET_PLMN
	    if [ $? -eq 0 ]; then
		SUCCESS=0
	    else
		$DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "Invalid target mobile number\n\n$TARGET_PLMN" 6 $MAX_WIDTH
	    fi
	done

	# send SMS to target phone
	echo "PROVISION [$SIM_IMEI]" | $GNOKII --sendsms $TARGET_PLMN 2>&1 |$DIALOG $DIALOG_OPTS --progressbox "Sending verification SMS..." 12 $MAX_WIDTH

	# prompt for sender phone number
	SUCCESS=1
	while [ $SUCCESS -ne 0 ]; do
	    SIM_PLMN=`$DIALOG $DIALOG_OPTS --title "$TITLE" --cancel-label "Resend" --stdout --inputbox "Please enter sender mobile number" 6 $MAX_WIDTH`

	    if [ $? -eq 0 ]; then
		# validate mobile number
		validate_plmn $SIM_PLMN
		if [ $? -eq 0 ]; then
		    SUCCESS=0
		    RESEND=0
		else
		    $DIALOG $DIALOG_OPTS --title "$TITLE" --msgbox "Invalid sender mobile number\n\n$SIM_PLMN" 6 $MAX_WIDTH
		fi
	    else
		SUCCESS=0
	    fi
	done
    done
}

################################################################################################################

enable_sim_lock() {

    local NEW_PIN
    local OUTPUT_FILE=/tmp/simlock.$$
    local TITLE="WIRELESS MODEM - ENABLE SIM LOCK"

    NEW_PIN=$1

    # enable lock
    REG_WVDIAL_1="s/\(^Init9\s=\s\AT+CLCK=\"SC\",1,\).*/\1\"${DEFAULT_PIN}\"/"

    # change pin
    REG_WVDIAL_2="s/\(^Init9\s=\s\AT+CPWD=\"SC\",\).*/\1\"${DEFAULT_PIN}\",\"${NEW_PIN}\"/"

    # update wvdial.conf
    sed "${REG_WVDIAL_1}" "${WVDIAL_CONF}" | sed "${REG_WVDIAL_2}" > "${WVDIAL_CONF}.$$"
    mv -f "${WVDIAL_CONF}.$$" "${WVDIAL_CONF}"

    # check if SIM lock is enabled
    STATUS=`${WVDIAL} lockstatus 2>&1 | grep "CLCK: " | awk '{print $2}'`

    # execute lock enable if needed
    if [ "$STATUS" != "1" ]; then
        while [ "$STATUS" != "1" ]; do

            ${WVDIAL} lock > "$OUTPUT_FILE" 2>&1 | $DIALOG $DIALOG_OPTS --title "Enabling SIM lock..." --tailbox "$OUTPUT_FILE" 18 $MAX_WIDTH

            STATUS=`${WVDIAL} lockstatus 2>&1 | grep "CLCK: " | awk '{print $2}'`
            if [ "$STATUS" != "1" ]; then
                $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "Failed to enable SIM lock (status $STATUS)" 4 $MAX_WIDTH
            fi
        done
    else
        $DIALOG $DIALOG_OPTS --title "${TITLE}" --msgbox "SIM lock already enabled" 4 $MAX_WIDTH
    fi

    # execute pin change
    PROGRESS_HEIGHT=12
    POSY=$((MAX_HEIGHT - $PROGRESS_HEIGHT - 2))

    ${WVDIAL} changepin 2>&1 \
    | $DIALOG $DIALOG_OPTS --begin $POSY 0 --progressbox "Changing PIN..." $PROGRESS_HEIGHT $MAX_WIDTH \
      --and-widget --keep-window \
      --title "${TITLE}" \
      --msgbox "Please verify that PIN change is successfully completed" 4 $MAX_WIDTH

}

################################################################################################################

provision_wireless_modem() {

    local SUCCESS
    local RESEND

    # read IMEI from modem
    eval `gnokii --identify 2>/dev/null | sed -e 's/ //g' -e's/:/=/g' -e 's/^/export MODEM_/g'`;

    $DIALOG $DIALOG_OPTS --title "WIRELESS MODEM DETECTED" --msgbox "Modem details:\n\n
IMEI         = [$MODEM_IMEI]\n
Manufacturer = [$MODEM_Manufacturer]\n
Model        = [$MODEM_Model]\n
Product Name = [$MODEM_Productname]\n
Revision     = [$MODEM_Revision]" 10 $MAX_WIDTH

    # unlock sim
    unlock_sim_with_pin

    # verify PLMN
    verify_plmn

    # generate random PIN code
    SIM_PIN=`date +"%s" | sed "s/.*\(....\)/\1/"`

    # write PIN code into SIM and enable locking
    enable_sim_lock "$SIM_PIN"

    # store PIN code on terminal
    echo -n "$SIM_PIN" > "$PIN_FILE.$$"

    # prompt user to remove/re-insert modem and verify that PIN works


    $DIALOG $DIALOG_OPTS --title "WIRELESS MODEM" --msgbox "Modem successfully provisioned" 4 $MAX_WIDTH

}

################################################################################################################

generate_initramfs() {

    local CWD=`pwd`

    if [ -r "$MEDIA/$CRYPT_KEY_FILE" ]; then

	# expand initramfs
	mkdir /tmp/newrd.$$
	cd /tmp/newrd.$$
	gunzip -c $INITRAMFS | cpio --verbose -i 2>&1 \
	    | $DIALOG $DIALOG_OPTS --progressbox "Unpacking initramfs..." $((MAX_HEIGHT - 5)) $MAX_WIDTH

	sleep 2;

	mv -f "$MEDIA/$CRYPT_KEY_FILE" "./$CRYPT_KEY_PATH/"
	find . | { cpio --verbose --dereference -o -H newc | gzip -c > /tmp/initrd.$$ ; } 2>&1 \
	    | $DIALOG $DIALOG_OPTS --progressbox "Regenerating initramfs..." $((MAX_HEIGHT - 5)) $MAX_WIDTH

	cd $CWD
	rm -rf /tmp/newrd.$$

        sync

    fi


}

################################################################################################################

remove_provisioning_grub_entry() {

    if  [ -r "$GRUB_DIRECTORY/$PROVISIONING_GRUB_ENTRY" ]; then
	rm -f "$GRUB_DIRECTORY/$PROVISIONING_GRUB_ENTRY"
	"$GRUB_UPDATE_SCRIPT" 2>&1 | $DIALOG $DIALOG_OPTS --progressbox "Updating GRUB entries ..." 10 $MAX_WIDTH

	sleep 2

	sync
    fi

}

################################################################################################################

send_terminal_data() {

    RETRY=0

    while [ $RETRY -eq 0 ]; do

	if [ -f "$MODEM_MARKER" ]; then
	    # dialing cht
	    PROGRESS_HEIGHT=12
	    POSY=$((MAX_HEIGHT - $PROGRESS_HEIGHT - 2))

	    sudo ${WVDIAL} cht >/tmp/pppd-session 2>&1 &

	    $DIALOG $DIALOG_OPTS --begin $POSY 0 --no-kill --tailboxbg /tmp/pppd-session $PROGRESS_HEIGHT $MAX_WIDTH 2>/dev/null &
	    DLG_PID=$!

	    # wait until ppp0 if up and running
            WAITS=5
            PPPD=1
            IP=
            while [ \( $PPPD -eq 1 -o -z "$IP" \) -a $WAITS -ne 0 ]; do
                sleep 5
                IP=`ifconfig ppp0 | egrep -o -e "inet addr:[0-9]+.[0-9]+.[0-9]+.[0-9]+" | awk -F":" '{print $2}'`
                PPPD=$?

                WAITS=$((WAITS - 1))
            done

	    killall dialog
	fi

	POST_DATA="func=provision&IMEI=$MODEM_IMEI&MODEM_MODEL=$MODEM_Model&MODEM_MANUFACTURER=$MODEM_Manufacturer&MODEM_PRODUCT=$MODEM_Productname&MODEM_REVISION=$MODEM_Revision&PLMN=$SIM_PLMN&PIN=$SIM_PIN&SERIAL=$SERIAL_NUMBER&SYSINFO=$SYSINFO_BASE64&MODEL=$MODEL"
	SUPPORT_URL="https://$SUPPORT_FQDN/cgi-bin/Server/vivipos/service.php"
	PROGRESS_HEIGHT=12
	POSY=$((MAX_HEIGHT - $PROGRESS_HEIGHT - 2))

	wget --waitretry=5 --no-http-keep-alive --no-cache -T 120 -t 3 -O - 2>&1 \
             --ca-certificate="$SSL_CA_CERTIFICATE" --certificate="$SSL_CERTIFICATE" \
	     --post-data="$POST_DATA" $SUPPORT_URL \
	    | $DIALOG $DIALOG_OPTS --begin $POSY 0 --progressbox "Transmitting Provisioning Information..." $PROGRESS_HEIGHT $MAX_WIDTH \
	      --and-widget --keep-window \
	      --title "TRANSMISSION COMPLETE" \
	      --extra-button --extra-label "Retry" \
	      --ok-label YES --cancel-label NO \
	      --yesno "Did transmission succeed?" 4 $MAX_WIDTH

	STATUS=$?

	if [ $STATUS -ne 3 ]; then
	    RETRY=1
	fi

	if [ -f "$MODEM_MARKER" ]; then
	    sudo killall pppd wvdial
	    
	    sleep 2
	fi
	
    done

    return $STATUS
}

################################################################################################################

determine_window_size

export MAX_WIDTH MAX_HEIGHT

check_tool_disk

vivipos-configure Configure

sign_license

# repack initramfs with crypt-key
generate_initramfs

update_support_center_fqdn

get_serial_number

if [ $? -ne 0 ]; then
    provision_failed 9 "Unable to retrieve system serial number"
fi

get_system_details

if [ -f "$MODEM_MARKER" ]; then
    provision_wireless_modem
else
    $DIALOG $DIALOG_OPTS --title "WIRELESS MODEM" --msgbox "Modem not detected, skipping modem provisioning" 4 $MAX_WIDTH
fi

send_terminal_data

if [ $? -ne 0 ]; then
    provision_failed 11 "Failed to transmit provisioning data to support center. Please reprovision this terminal after the errors have been resolved."
else

    [ -f "${LICENSE_FILE}".$$ ] && mv -f "${LICENSE_FILE}".$$ "${LICENSE_FILE}"
    [ -f "${PIN_FILE}".$$ ] && mv -f "${PIN_FILE}".$$ "${PIN_FILE}"
    [ -f "$SUPPORT_FQDN_FILE".$$ ] && mv -f "$SUPPORT_FQDN_FILE".$$ "$SUPPORT_FQDN_FILE"
    [ -f /tmp/initrd.$$ ] && mv -f /tmp/initrd.$$ "${INITRAMFS}"

    sync

    $DIALOG $DIALOG_OPTS --title "Provision Successful" --msgbox "Provisioning is successful. Press OK to power off the terminal. Upon reboot, please verify that\n\n 1. license is correct\n 2. (if applicable) wireless modem is successfully unlocked" 10 $MAX_WIDTH

    # remove ROUNDROCK PROVISIONING grub entry with
    remove_provisioning_grub_entry

    /usr/bin/clear

    poweroff
fi
