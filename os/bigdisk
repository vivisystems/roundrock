#!/bin/sh

LABEL_PATH=/dev/disk/by-label
VOLUME=VIVIPOS_DATA
LICENSE=/etc/vivipos.lic
MTAB=/etc/mtab
MARKER=.bigdisk
STAGING=/mnt/vivipos_data
CREATED_STAGING=0
TARGET=/data
PROVISIONED=0
MOUNT=""
FSCK=/sbin/fsck
FSCK_FLAGS="-T -C -t ext3 -M -p"
BIGDISK_SETTINGS=/data/profile/bigdisk_settings
DIRS="backups databases images irc_packages journal training"
DBS="vivipos vivipos_acl vivipos_extension vivipos_inventory vivipos_journal vivipos_order vivipos_table"

PATH=/bin:/usr/bin:/sbin:/usr/sbin
export PATH

log_warning_msg() {
   echo "$@"
}

log_success_msg() {
   echo "$@"
}

log_failure_msg() {
   echo "$@"
}

log_begin_msg() {
   echo "$@"
}

log_end_msg() {
   echo "$@"
}

. /lib/lsb/init-functions

##
## check if data volume exists
##

handle_failure() {
    if [ ! -z "${MOUNT}" -a -d "${MOUNT}" ]
    then
	sync
	umount -l "${MOUNT}"
    fi

    if [ -d "${STAGING}" -a "${CREATED_STAGING}" -eq 1 ]
    then
	rmdir "${STAGING}"
    fi

    log_failure_msg "VIVIPOS data volume not loaded"
    log_end_msg 1

    exit
}

log_begin_msg "Loading VIVIPOS data volume"

##
## check if license file exists
##

if [ ! -r ${LICENSE} ]
then
    log_warning_msg "... unable to read license"
    handle_failure
fi

##
## check if data volume is present
##

DEVICE=`findfs LABEL="${VOLUME}"`

if [ ! -z "${DEVICE}" ]
then

    ##
    ## check if USB device
    ##

    BUS=`udevadm info -q env -n "${DEVICE}" | grep ID_BUS | awk -F "=" '{ print $2 }'`
    if [ ${BUS} = "usb1" ]
    then
	log_success_msg "... data volume [${VOLUME}] is not loaded when connected via USB"; log_end_msg 0
	exit
    fi

    ##
    ## check if data volume is already mounted
    ##

    MOUNT=`grep -m 1 "${DEVICE}" ${MTAB} | awk -F " " '{ print $2 }'`
    if [ -z "${MOUNT}" ]
    then

        ##
        ## not mounted, so let's do fsck
        ##
        ${FSCK} ${FSCK_FLAGS} LABEL="${VOLUME}"
        if [ $? -ne 0 ];
        then
            log_warning_msg "... data volume [${VOLUME}] is corrupt and needs to be manually repaired"
            handle_failure
        else
            log_success_msg "... data volumne [${VOLUME}] passed file system check"
        fi

	##
	## need to mount, so let's ensure staging mount point exists
	##

	if [ ! -d ${STAGING} ]
	then

	    ##
	    ## create staging mount point
	    ##

	    mkdir -p ${STAGING}
	    if [ -d ${STAGING} ]
	    then
	        log_success_msg "... created mount point at [${STAGING}]"
		CREATED_STAGING=1
	    else
	        log_warning_msg "... failed to creat mount point at [${STAGING}]"
		handle_failure
	    fi
	fi

	##
	## mount data volume and record mount point
	##

	mount "${LABEL_PATH}/${VOLUME}" "${STAGING}"
	MOUNT=`cat ${MTAB} | awk -F " " '{ print $2 }' | grep "${STAGING}"`

    else

	##
	## volume already mounted
	##

	log_warning_msg "... data volume [${VOLUME}] already mounted on [${MOUNT}]";
    fi

    ##
    ## proceed only if volume is successfully mounted at staging mount point
    ##

    if [ "${MOUNT}" != "${STAGING}" ]
    then
	MOUNT=""

	log_warning_msg "... data volume [${VOLUME}] not mounted at staging location [${STAGING}]"
	handle_failure
    fi

    ##
    ## has this volume been provisioned?
    ##
    if [ -r "${STAGING}/${MARKER}" ]
    then
	PROVISIONED=1
	/usr/bin/cmp -s -i 37:0 -n 128 "${STAGING}/${MARKER}" ${LICENSE}
	if [ $? -eq 0 ]
	then
	    log_success_msg "... data volume [${VOLUME}] has been provisioned"
	else
	    log_warning_msg "... data volume [${VOLUME}] has been provisioned for another terminal"
	    handle_failure
	fi
    else
	PROVISIONED=0
    fi

    ##
    ## provision data volume if necessary
    ##

    if [ ${PROVISIONED} -eq 0 ]
    then

	##
	## check if /data directory already exists on data volume
	##

	if [ -d ${STAGING}/data ]
	then
	    log_warning_msg "... provisioning terminated due to presence of existing data on data volume [${VOLUME}]"
	    handle_failure
	else
	    mkdir -p "${STAGING}/data"
	    if [ ! -d "${STAGING}/data" ]
	    then
		log_warning_msg "... failed to create data directory on data volume [${VOLUME}]"
		handle_failure
	    fi
	fi
	
	##
	## copy from existing data
	##

	log_warning_msg "... provisioning new data volume..."
	tar -chf - -C "${TARGET}" ${DIRS} | tar -xf - -C "${STAGING}/data"
	if [ $? -ne 0 ]
	then
	    log_warning_msg "... failed to copy from [${TARGET}] to data volume [${VOLUME}]"
	    handle_failure
	fi

	##
	## create provisioning marker
	##

        echo `uuid` > "${STAGING}/${MARKER}"
	cat "${LICENSE}" >> "${STAGING}/${MARKER}"
	/usr/bin/cmp -s -i37:0 -n 128 "${STAGING}/${MARKER}" "${LICENSE}"
	if [ $? -eq 0 ]
	then
            echo >> "${STAGING}/${MARKER}"
            df -h "${DEVICE}" | grep "${DEVICE}" >> "${STAGING}/${MARKER}"
	    log_success_msg "... data volume [${VOLUME}] successfully provisioned"
	else
	    ##
	    ## clean up data
	    ##
	    rm -rf "${STAGING}/data"
            rm -rf "${STAGING}/${MARKER}"

	    log_warning_msg "... failed to create provisioning marker"

	    handle_failure
	fi
    else
        ##
        ## big disk is already provisioned, but if bigdisk setting is present
        ## but does not match marker uuid, then CF card data may be more recent
        ## than provisioned data, so we need to merge from CF card back to big
        ## disk
        ##
        if [ -r "${BIGDISK_SETTINGS}" ]
        then
            read profile_uuid < "${BIGDISK_SETTINGS}"
            read disk_uuid < "${STAGING}/${MARKER}"
            if [ "${profile_uuid}" != "${disk_uuid}" ]
            then
                ##
                ## data on internal storage may have been updated;
                ## need to overwrite databases

                rm -rf "${STAGING}/data/databases"
                tar -chf - -C "${TARGET}" databases | tar -xf - -C "${STAGING}/data/"

                if [ $? -ne 0 ]
                then
                    rm -rf "${STAGING}/data/databases"
                    log_warning_msg "... failed to re-provision data volume [${VOLUME}]"
                    handle_failure
                else
                    log_success_msg "... data volume [${VOLUME}] successfully re-provisioned"
                fi
            else
                log_success_msg "... data volume [${VOLUME}] successfully validated"
            fi
        fi
    fi

    ##
    ## mount subdirectories from staging to target mount point
    ##

    MOUNTED_ALL=1
    MOUNTED_DIRS=""
    for dir in ${DIRS}
    do
	mount --bind "${STAGING}/data/${dir}" "${TARGET}/${dir}"
        if [ $? -eq 0 ]
        then
            log_success_msg "... [${STAGING}/data/${dir}] mounted on [${TARGET}/${dir}]"
            MOUNTED_DIRS="${MOUNTED_DIRS} ${dir}"
        else
	    log_warning_msg "... failed to mount [${STAGING}/data/${dir}] on [${TARGET}/${dir}]"
            MOUNTED_ALL=0
            break;
        fi
    done

    ##
    ## verify that all subdirectories are mounted correctly
    ##
    if [ ${MOUNTED_ALL} -eq 0 ]
    then
	##
	## one or more subdirectories failed to mount
	##

	sync

	for dir in ${MOUNTED_DIRS}
	do
	    umount -f "${TARGET}/${dir}"
	    if [ $? -eq 0 ]
	    then
		log_success_msg "... umounting [${STAGING}/data/${dir}] from [${TARGET}/${dir}]"
	    fi
	done

	log_warning_msg "... one or more subdirectories failed to mount"

	handle_failure

    fi

    ##
    ## mount big disk Marker
    ##
    if [ ! -e "${TARGET}/${MARKER}" ]
    then
        touch "${TARGET}/${MARKER}"
    fi
    mount --bind "${STAGING}/${MARKER}" "${TARGET}/${MARKER}"

    log_success_msg "Data volume [${VOLUME}] successfully mounted on [${TARGET}]"

else
    ##
    ## data volume is not available
    ##
    log_success_msg "Data volume [${VOLUME}] is not available"
fi

sync

log_end_msg 0
