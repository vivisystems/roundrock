#! /bin/sh
### BEGIN INIT INFO
# Provides:          nopear
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: nopear initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Rack Lin <racklin@gmail.com>
#


# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="sync client"
NAME=sync_client
SERVICE=sync-client
DAEMON=/data/vivipos_webapp/cake/console/cake.php

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	status=`status "${SERVICE}" | awk -F" " '{ print $2 }'`
	goal=`echo "${status}" | awk -F"/" '{print $1}'`

	if [ -z "${status}" ]; then
		return 2
	elif [ "${goal}" = "start" ]; then
		return 1
	else
		start --no-wait "${SERVICE}"
		if [ $? -ne 0 ]; then
			return 2
		else
			return 0
		fi
	fi

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	status=`status "${SERVICE}" | awk -F" " '{ print $2 }'`
	goal=`echo "${status}" | awk -F"/" '{print $1}'`

	if [ -z "${status}" ]; then
		return 2
	elif [ "${goal}" = "stop" ]; then
		return 1
	else
		stop "${SERVICE}"
		if [ $? -ne 0 ]; then
			return 2
		else
			return 0
		fi
	fi

}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	#reload "${SERVICE}"
	restart "${SERVICE}"
	return $?
}

#
# Function that restarts the daemon/service
#
do_restart() {
	restart --no-wait "${SERVICE}"
	return $?
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  reload)
	[ "$VERBOSE" != no ] && log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	case "$?" in
		0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  restart)
	[ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
	do_restart
	case "$?" in
		0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		1) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	exit 3
	;;
esac

:
