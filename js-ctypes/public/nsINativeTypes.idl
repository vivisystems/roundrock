/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is js-ctypes.
 *
 * Contributor(s):
 *  Mark Finkle <mark.finkle@gmail.com>, <mfinkle@mozilla.com>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

#include "nsISupports.idl"

/**
 * Magical interface that implements nsIXPCScriptable
 * so it can act as a callable object in JS
 */
[scriptable, uuid(a54a5c6c-9529-418c-9d9f-b8111c6e247d)]
interface nsINativeMethod : nsISupports
{
};

/**
 * Interface that wraps a dynamic library and can create
 * callable 'method' objects from exportable functions in the library
 */
[scriptable, uuid(352a72c1-5b99-451e-a330-c45079d8f087)]
interface nsINativeTypes : nsISupports
{
    const PRUint16 STDCALL    = 1;
    const PRUint16 SYSV       = 2;

    const PRUint16 UNKNOWN    = 0;
    const PRUint16 VOID       = 1;
    const PRUint16 BOOL       = 2;
    const PRUint16 INT8       = 3;
    const PRUint16 INT16      = 4;
    const PRUint16 INT32      = 5;
    const PRUint16 INT64      = 6;
    const PRUint16 FLOAT      = 7;
    const PRUint16 DOUBLE     = 8;
    const PRUint16 INT8_P     = 9;
    const PRUint16 INT16_P    = 10;
    const PRUint16 INT32_P    = 11;
    const PRUint16 FLOAT_P    = 12;
    const PRUint16 DOUBLE_P   = 13;
    const PRUint16 STRING     = 14;
    const PRUint16 WSTRING    = 15;
    const PRUint16 STRUCT     = 16;

    /**
     * Returns the name of the dynamically loaded library
     */
    readonly attribute AString name;

    /**
     * Attempts to dynamically load the specified library
     */
    boolean open(in AString aName);

    /**
     * Unloads the currently loaded library. This will cause any active
     * nsINativeMethod objects to fail.
     */
    boolean close();

    /**
     * Used to specify an exported method from the currently loaded library. Even
     * though the method appears to take no parameters, it does in fact require
     * several params. It uses some XPCOM/JSAPI magic to extract the parameters.
     *
     * declare(in AString aName, in int aReturnType, in int aArgType1, ...)
     */
    nsINativeMethod declare();
};
