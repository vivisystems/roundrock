<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="onscreenvfd">
        <resources>
            <stylesheet src="chrome://vivipos/skin/bindings/onscreenvfd.css" />
        </resources>

        <content>
            <xul:hbox flex="1" xbl:inherits="orient,align">
                <xul:label anonid="labelVfd" hidden="true" class="label_vfd" xbl:inherits="class=labelClass,value"></xul:label>

                <xul:grid flex="1">
                    <xul:columns>
                        <xul:column flex="2" />
                        <xul:column flex="1" />
                    </xul:columns>
                    <xul:rows flex="1">
                        <xul:row flex="1">
                            <xul:label anonid="label0_0" flex="1" class="label_vfd" xbl:inherits="class=labelClass,value"></xul:label>
                            <xul:label anonid="label1_0" class="label_vfd" xbl:inherits="class=labelClass,value"></xul:label>
                        </xul:row>
                        <xul:row>
                            <xul:label anonid="label0_1" class="label_vfd" xbl:inherits="class=labelClass,value"></xul:label>
                            <xul:label anonid="label1_1" flex="1" class="label_vfd" xbl:inherits="class=labelClass,value"></xul:label>
                        </xul:row>
                    </xul:rows>
                </xul:grid>
            </xul:hbox>

        </content>
  
        <xbl:implementation>
	
            <xbl:field name="_maxlen">25</xbl:field>
            <xbl:field name="roundPrecision">0</xbl:field>
            <field name="_label0_0">null</field>
            <field name="_label0_1">null</field>
            <field name="_label1_0">null</field>
            <field name="_label1_1">null</field>
	

            <constructor>
            <![CDATA[

                this._label0_0 = document.getAnonymousElementByAttribute(this, "anonid", "label0_0");
                this._label0_1 = document.getAnonymousElementByAttribute(this, "anonid", "label0_1");
                this._label1_0 = document.getAnonymousElementByAttribute(this, "anonid", "label1_0");
                this._label1_1 = document.getAnonymousElementByAttribute(this, "anonid", "label1_1");

                this._maxlen = this.getAttribute('maxlen');

                this.keypadevents = GeckoJS.Controller.getInstanceByName('Keypad').events;
                this.cartevents = GeckoJS.Controller.getInstanceByName('Cart').events;

                var self = this;

                this.onGetSubtotal = function(evt) {
                    var transaction = evt.data;
                    if (transaction) {
                        self.setText0_0(_('** TOTAL **'));
                        self.setText0_1(transaction.getTotal(true));
                        self.setText1_1(_('REM') + ': ' + transaction.getRemainTotal(true));
                        self.setText1_0(_('PAY') + ': ' + transaction.getPaymentSubtotal(true));
                    } else {
                        self.onClear(evt);

                    }
                }

                this.onReturnItem = function(evt) {
                    self.setText1_1(_('Return'));
                }

                this.onAddBuffer = function(evt) {
                    self.setText1_1(_('I') + ': ' + evt.data);
                }

                this.onSetQty = function(evt) {
                    self.setText1_1(_('QTY') + ': '+ evt.data);
                }

                this.onClear = function(evt) {
                    
                    if (evt) var transaction = evt.data;
                    else var transaction = null;
                    var total = "0";
                    var remain = "0";
                    var payment = "0";

                    if (transaction != null) {
                        total = transaction.getTotal(true);
                        remain = transaction.getRemainTotal(true);
                        payment = transaction.getPaymentSubtotal(true);
                    }else {
                        remain = this.format(0);
                    }

                    self.setText0_1(total);
                    self.setText0_0(_('** TOTAL **'));
                    self.setText1_1(_('REM') + ': ' + remain);
                    self.setText1_0(_('PAY') + ': ' + payment);

                }

                this.onCancel = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) return;
                    self.setText1_0(_('CANCELED'));
                    self.setText1_1('SEQ#' + transaction.data.seq);
                    self.setText0_1(self.format(0));

                }

                this.onQueue = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) return;
                    self.setText1_0(_('QUEUED'));
                    self.setText1_1('SEQ#' + transaction.data.seq);

                }

                this.onSubmit = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) {
                        self.setText0_1(self.format(0));
                        return;
                    }
                    self.setText0_1(transaction.getTotal(true));
                    self.setText1_0(_('PAY') + ': ' + transaction.getPaymentSubtotal(true));
                    self.setText1_1(_('CHG') + ': ' + self.format(0-transaction.getRemainTotal(true)));
                }

                this.format = function(number) {
                    self.roundPrecision = GeckoJS.Configure.read('vivipos.fec.settings.PrecisionPrices') || 0;

                    var options = {
                        places: ((self.roundPrecision>0)? self.roundPrecision : 0)
                    };
                    // format display precision
                    return GeckoJS.NumberHelper.format(number, options);

                }

                this.keypadevents.addListener('onAddBuffer', this.onAddBuffer, this);

                this.cartevents.addListener('onGetSubtotal', this.onGetSubtotal, this);
                this.cartevents.addListener('onReturnItem', this.onReturnItem, this);
                this.cartevents.addListener('onSetQty', this.onSetQty, this);
                this.cartevents.addListener('onClear', this.onClear, this);
                this.cartevents.addListener('onCancel', this.onCancel, this);
                this.cartevents.addListener('onQueue', this.onQueue, this);
                this.cartevents.addListener('onSubmit', this.onSubmit, this);

                this.ready = function() {
                    self.roundPrecision = GeckoJS.Configure.read('vivipos.fec.settings.PrecisionPrices') || 0;
                    self.onClear({data: null});
                }

                window.addEventListener('DOMContentLoaded', this.ready, true);

            ]]>
            </constructor>

            <destructor>
            <![CDATA[
                if (this.keypadevents) {
                    this.keypadevents.removeListener('onAddBuffer', this.onAddBuffer);
                }
                if (this.cartevents) {
                    this.cartevents.removeListener('onGetSubtotal', this.onGetSubtotal);
                    this.cartevents.removeListener('onReturnItem', this.onReturnItem);
                    
                    this.cartevents.removeListener('onSetQty', this.onSetQty);
                    this.cartevents.removeListener('onClear', this.onClear);
                    this.cartevents.removeListener('onCancel', this.onCancel);
                    this.cartevents.removeListener('onQueue', this.onQueue);
                    this.cartevents.removeListener('onSubmit', this.onSubmit);
                }

                window.removeEventListener('DOMContentLoaded', this.ready, true);

            ]]>
            </destructor>
	
            <xbl:method name="setText0_0">
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    if(val.length > this._maxlen) {
                        val = val.substr(0,this._maxlen-4) + "..." + val.substr(val.length-1,1);
                    }
                    this._label0_0.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText0_1">
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    if(val.length > this._maxlen) {
                        val = val.substr(0,this._maxlen-4) + "..." + val.substr(val.length-1,1);
                    }
                    this._label0_1.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText1_0">
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    if(val.length > this._maxlen) {
                        val = val.substr(0,this._maxlen-4) + "..." + val.substr(val.length-1,1);
                    }
                    this._label1_0.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText1_1">
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    if(val.length > this._maxlen) {
                        val = val.substr(0,this._maxlen-4) + "..." + val.substr(val.length-1,1);
                    }
                    this._label1_1.value = val;
                ]]>
                </xbl:body>
            </xbl:method>

        </xbl:implementation>

    </binding>

</bindings>
