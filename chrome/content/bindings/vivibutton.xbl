<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="vivibutton" display="xul:button"
           extends="chrome://global/content/bindings/button.xml#button-base">
    <resources>
      <stylesheet src="chrome://vivipos/skin/bindings/vivibutton.css" />
    </resources>

  <content>
      <children includes="observes|template|menupopup|tooltip"/>
      <xul:hbox class="box-inherit button-box" xbl:inherits="align,dir,pack,orient,disabled"
                align="center" pack="center" flex="1" anonid="vivibutton-box" style="overflow: hidden;">
          <xul:image anonid="vivibutton-image" class="button-icon" xbl:inherits="validate,src=image"/>
          <!-- xul:label anonid="label" crop="end" class="button-text" xbl:inherits="accesskey,crop"> </xul:label-->
          <xul:description anonid="vivibutton-label" class="button-text" xbl:inherits="accesskey,crop,pre" > </xul:description>
      </xul:hbox>
  </content>

  <xbl:implementation>

    <property name="label" onget="return this.getLabel();" onset="return this.setLabel(val);" />

    <property name="vivibuttonBox" onget='return document.getAnonymousElementByAttribute(this, "anonid", "vivibutton-box");' readonly="true" />

    <property name="boxObject" onget='return this.vivibuttonBox.boxObject;' readonly="true" />

    <property name="boxHeight" onget="return this.boxObject.height;" readonly="true" />

    <property name="boxWidth" onget="return this.boxObject.width;" readonly="true" />

    <property name="vivibuttonImage" onget='return document.getAnonymousElementByAttribute(this, "anonid", "vivibutton-image");' readonly="true" />
    <property name="vivibuttonLabel" onget='return document.getAnonymousElementByAttribute(this, "anonid", "vivibutton-label");' readonly="true" />

    <constructor><![CDATA[

        var suspended = false;

        var aLabel = this.vivibuttonLabel ;

        var autoResize = (this.getAttribute('autoresize') || "true").toLowerCase() == 'true';

        this.roles = this.getAttribute('roles') || '';
        this.action = this.getAttribute('action') || 'display';

        var value = this.getAttribute('label') || '';
        if(aLabel.getAttribute('crop')) {
            aLabel.removeChild(aLabel.firstChild);
        }

        if (this.getAttribute('pre')) {
            aLabel.setAttribute('style', 'white-space: pre;');
        }

        this.setLabel(value);

        this.render();
       
        var self = this;
        
        if (this.roles.length >0 ) {

            this.observer = GeckoJS.Observer.newInstance({
                    topics: ['acl-session-change', 'button-state-suspend', 'button-state-resume'],
                    observe: function(aSubject, aTopic, aData) {
                        switch(aTopic) {
                            case 'acl-session-change':
                                self.render();
                                break;

                            case 'button-state-suspend':
                                self.suspended = (self.getAttribute('suspendable') || 'true') == 'true';
                                self.render();
                                break;

                            case 'button-state-resume':
                                self.suspended = false;
                                self.render();
                                break;
                        }
                    }
                }).register();

        }

        this.addEventListener('DOMAttrModified', this._attrmodified, true);

        // process resizeLabel if needed.
        this.ready = false;

        if (autoResize) {
            this.ready = function() {
                self.resizeLabel();
            };

            window.addEventListener('load', this.ready, true);
        }


        ]]>
        </constructor>

        <destructor><![CDATA[

        this.removeEventListener('DOMAttrModified', this._attrmodified, true);

        if (this.ready) {
            window.removeEventListener('load', this.ready, true);
        }

        if (this.roles.length >0 ) this.observer.unregister();

        ]]>
        </destructor>

    <method name="_attrmodified">
      <parameter name="event"/>
      <body><![CDATA[

        let value = event.newValue;
        let attr = event.attrName;

        switch (attr) {

            case 'label':
                this.setLabel(value);
            break;

            case 'image':
                this.setImage(value);
                break;

        }

      ]]>
      </body>
    </method>

    <method name="setLabel">
      <parameter name="value" />
      <body><![CDATA[

        var aLabel = this.vivibuttonLabel ;
        if(aLabel.getAttribute('crop')) {
            aLabel.value = value;
        }else {
            aLabel.firstChild.data = value;
        }

      ]]>
      </body>
    </method>     

    	
    <method name="getLabel">
      <body><![CDATA[

        var aLabel = this.vivibuttonLabel;
        
        return aLabel.firstChild.data;

        if(aLabel.getAttribute('crop')) {
            return aLabel.value;
        }else {
            return aLabel.firstChild.data;
        }


      ]]>
      </body>
    </method>     


    <method name="setImage">
      <parameter name="value" />
      <body><![CDATA[

        var image = this.vivibuttonImage;
        image.src = value;
        //if(image.src == '') image.collapsed = true;
        //else image.collapsed = false;

      ]]>
      </body>
    </method>


    <method name="render">
      <body><![CDATA[

        var roles = this.roles; 
        var action = this.action;

        if (roles.length == 0) {
            this.disabled = this.suspended;
            return;
        }

	/*
        if(this.suspended) {
            // alway disable
            this.disabled = true;
            return ;
        }
	*/
        var isInRole = false;
        
        if(GeckoJS && GeckoJS.AclComponent && typeof GeckoJS.AclComponent.isUserInRole == 'function') {
            isInRole = GeckoJS.AclComponent.isUserInRole(roles);
        }

        var $button =  jQuery(this);

        if (isInRole) {
            if(action =='display') {
                $button.show();
                this.disabled = this.suspended;
            }
            else $button.show();
        }else {
            if(action =='display') this.disabled = true;
            else $button.hide();
        }
      ]]>
      </body>
    </method>

    <method name="resizeLabel">
        <parameter name="width" />
        <parameter name="height" />
        <body><![CDATA[

            var aLabel = this.vivibuttonLabel;
            // GREUtils.log('resizeLabel ' + aLabel  + ',,' + this.vivibuttonBox);
            var $btn = $(this.vivibuttonBox);

            width = width || $btn.css('width').replace('px', '');
            height = height || $btn.css('height').replace('px', '');

            aLabel.style['width'] = width +'px' ;
            aLabel.style['max-width'] = width +'px';

        ]]>  
        </body>
    </method>

  </xbl:implementation>


  <xbl:handlers>
  </xbl:handlers>

</binding>

</bindings>
