<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <binding id="vivisessionstatus">
        <resources>
        </resources>

        <!-- Event Handlers -->
        <handlers>
        </handlers>

        <content>
        <xul:hbox anonid="vivisessionstatus-hbox" xbl:inherits="flex">
            <xul:grid anonid="vivisessionstatus-grid" flex="1"/>
        </xul:hbox>
        </content>
        <implementation>

            <!-- Fields -->

            <!-- Constructor -->
            <constructor>
            <![CDATA[
                //GREUtils.log('[CONSTRUCTOR]: entering');

                this.events = GeckoJS.Session.getInstance().events;
                this.keys = [];
                this.nodes = [];
                var self = this;

                var changeHandler = function (evt) {
                    //GREUtils.log('[CHANGE]: entering id <' + this.id + '> event <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');
                    var value = evt.getData().value;
                    var index = self._locateKey(evt.getData().key);

                    if (index != -1) {
                        var valueNode = self.nodes[index]; //document.getAnonymousElementByAttribute(this, 'anonid', 'value' + index);
                        if (valueNode) {
                            valueNode.value = value;
                        }
                    }
                }

                var removeHandler = function (evt) {
                    //GREUtils.log('[REMOVE]: entering <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');

                    var index = self._locateKey(evt.getData());
                    if (index != -1) {
                        try {
                        var valueNode = self.nodes[index]; //document.getAnonymousElementByAttribute(this,'anonid', 'value' + index);
                        } catch (e) {var valueNode=null;}
                        if (valueNode) {
                            valueNode.value = '';
                        }
                    }
                    //GREUtils.log('[REMOVE]: leaving');
                }

                var clearHandler = function (evt) {
                    GREUtils.log('[CLEAR]: entering <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');

                    for (var i = 0; i < self.keys.length; i++) {
                        var valueNode = self.nodes[i]; //document.getAnonymousElementByAttribute(this,'anonid', 'value' + i);
                        if (valueNode) {
                            valueNode.value = '';
                        }
                    }
                    //GREUtils.log('[CLEAR]: leaving');
                }

                if (this.events) {
                    this.events.addListener('change', changeHandler, this);
                    this.events.addListener('remove', removeHandler, this);
                    this.events.addListener('clear', clearHandler, this);
                    //GREUtils.log('[CONSTRUCTOR]: event listeners attached');
                }
                else {
                    //GREUtils.log('[CONSTRUCTOR]: failed to get Session events');
                }
                this.changeHandler = changeHandler;
                this.removeHandler = removeHandler;
                this.clearHandler = clearHandler;

                var self = this;
                this.id = this.getAttribute('id');
                this.ready = function() {
                    self._render();
                }
                
                window.addEventListener('DOMContentLoaded', this.ready, true);

                // register listener for attribute modified events
                this.addEventListener('DOMAttrModified', this._attrModified, true);

                self._render;
                //GREUtils.log('[CONSTRUCTOR]: leaving');
            ]]>
            </constructor>

            <!-- destructor -->
            <destructor>
            <![CDATA[
                //GREUtils.log('[DESTRUCTOR]: entering');
                if (this.events) {
                    this.events.removeListener('change', this.changeHandler);
                    this.events.removeListener('remove', this.removeHandler);
                    this.events.removeListener('clear', this.clearHandler);
                }

                window.removeEventListener('DOMContentLoaded', this.ready, true);
                this.removeEventListener('DOMAttrModified', this._attrModified, true);
                //GREUtils.log('[DESTRUCTOR]: leaving');
            ]]>
            </destructor>

            <!-- Methods -->

            <method name="_attrModified">
                <parameter name="evt"/>
                <body>
                <![CDATA[
                    //GREUtils.log('[ATTRIBUTE-MODIFIED]: attribute <' + evt.attrName + '> changed to value <' + evt.newValue + '>');

                    if (evt.attrName != 'value') {
                        this._render();
                    }
                ]]>
                </body>
            </method>

            <method name="_render">
                <body>
                <![CDATA[

                var labels = this.getAttribute('labels').split(',');
                var ncols = this.getAttribute('columns');
                var useSep = (this.getAttribute('noseparator') != 'true');
                var useLabel = (this.getAttribute('nolabels') != 'true');
                var ratios = this.getAttribute('ratios').split(',');

                var labelClass = this.getAttribute('labelClass');
                var valueClass = this.getAttribute('valueClass');
                var separatorClass = this.getAttribute('separatorClass') || 'groove-thin';

                this.keys = this.getAttribute('keys').split(',');
                
                if (isNaN(ncols) || (ncols < 1)) ncols = 1;
                
                //GREUtils.log('[RENDER]: id <' + this.id + '> retrieved labels <' + labels + '> and keys <' + this.keys + '>');
                var grid = document.getAnonymousElementByAttribute(this,'anonid', 'vivisessionstatus-grid');
                //GREUtils.log('[RENDER]: located top-level grid <' + grid.nodeName + '>');
  
                while (grid.firstChild) grid.removeChild(grid.firstChild);
                
                // create columns
                var columns = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:columns");
                
                for (var i = 0; i < ncols; i++) {
                    if (useLabel) {
                        var labelCol = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:column");
                        labelCol.setAttribute('flex', '0');
                        columns.appendChild(labelCol);
                    }

                    var flex = 1;
                    if (i < ratios.length) {
                        flex = parseInt(ratios[i]) || 1;
                    }
                    var valueCol = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:column");
                    valueCol.setAttribute('flex', flex);
                    columns.appendChild(valueCol);

                    if (useSep && (i < (ncols - 1))) {
                        var sepCol = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:column");
                        sepCol.setAttribute('flex', '0');
                        columns.appendChild(sepCol);
                    }
                }
                grid.appendChild(columns);

                var rows = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:rows");
                var r = Math.ceil(this.keys.length/ncols);

                //GREUtils.log('[RENDER]: keys <' + this.keys.join(', ') + '> #keys <' + this.keys.length + '> #cols <' + ncols + '> #row <' + r + '>');
                // create rows

                this.nodes = [];
                var index = 0;
                for (var i = 0; i < r; i++) {
                    var row = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:row");

                    for (j = 0; j < ncols; j++) {
                        if (useLabel) {
                            // create label
                            var labelNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:textbox");
                            labelNode.setAttribute('class', labelClass);
                            labelNode.setAttribute('value', labels[index]);
                            labelNode.setAttribute('disabled', 'true');
                            row.appendChild(labelNode);
                        }

                        //GREUtils.log('[RENDER]: added field label <' + labelNode.getAttribute('value') + '>');
                        var valueNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:textbox");
                        valueNode.setAttribute('class', valueClass);
                        valueNode.setAttribute('anonid', 'value' + index);
                        valueNode.setAttribute('value', GeckoJS.Session.get(this.keys[index]));
                        valueNode.setAttribute('disabled', 'true');
                        row.appendChild(valueNode);
                        this.nodes.push(valueNode);

                        //GREUtils.log('[RENDER]: added field value <' + valueNode.getAttribute('value') + '>');

                        if (useSep && (j < (ncols - 1))) {
                            var sepNode = document.createElementNS("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul","xul:separator");
                            sepNode.setAttribute('class', separatorClass);
                            sepNode.setAttribute('orient', 'vertical');
                            row.appendChild(sepNode);
                        }
                        rows.appendChild(row);
                        if (++index == this.keys.length) break;
                    }
                }
                grid.appendChild(rows);
                ]]>
                </body>
            </method>

            <method name="_locateKey">
                <parameter name="key"/>
                <body>
                <![CDATA[
                    //GREUtils.log('[LOCATE]: checking for key <' + key + '> in keys <' + this.keys + '');

                    var found = -1;
                    
                    for (var i = 0; i < this.keys.length; i++) {
                        //GREUtils.log('[LOCATE]: checking key <' + i + '> value <' + this.keys[i] + '>');
                        if (this.keys[i] == key) {
                            found = i;
                            break;
                        }
                    }
                    //GREUtils.log('[LOCATE]: found key at index <' + found + '>');
                    return found;
                ]]>
                </body>
            </method>
        </implementation>
    </binding>
</bindings>
