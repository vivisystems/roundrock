<?xml version="1.0"?>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="viviscrollabletree">
    <content>

        <xul:hbox style="margin: 0px; padding:0px;" flex="1" anonid="scrollablepanel-container" class="scrollablepanel" xbl:inherits="class,flex,pack,dir">

            <xul:vivitree anonid="vivitree" flex="1" xbl:inherits="class=treeClass,headers,fields,enableColumnDrag,flags,hidecolumnpicker,rows,seltype,collapsed,hidevscroll,hidehscroll,fixed,primary,disabled,disableKeyNavigation,types,editables,ignorecolumnpickers"/>

            <xul:vbox style="margin: 0px; padding:0px;" class="scrollablepanel-scrollbar" xbl:inherits="class=scrollbarClass" anonid="scrollbar" >
                <xul:vivibutton label="UP" anonid="scrollbutton-up" disabled="true" onclick="event.stopPropagation()" oncommand="_autorepeatbuttonScroll(event);" xbl:inherits="class=scrollUpClass"></xul:vivibutton>
                <xul:spacer flex="1"/>
                <xbl:children/>
                <xul:spacer flex="1"/>
                <xul:vivibutton label="DOWN" anonid="scrollbutton-down" disabled="true" onclick="event.stopPropagation()" oncommand="_autorepeatbuttonScroll(event);" xbl:inherits="class=scrollDownClass"></xul:vivibutton>
            </xul:vbox>
        </xul:hbox>
    </content>
    <resources>
      <stylesheet src="chrome://vivipos/skin/bindings/viviscrollabletree.css"/>
    </resources>

  <implementation>

      <field name="_scrollbox">
        document.getAnonymousElementByAttribute(this, "anonid", "scrollbox");
      </field>
      <field name="_scrollButtonUp">
        document.getAnonymousElementByAttribute(this, "anonid", "scrollbutton-up");
      </field>
      <field name="_scrollButtonDown">
        document.getAnonymousElementByAttribute(this, "anonid", "scrollbutton-down");
      </field>

    
  <property name="vivitree" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'vivitree');" readonly="true"/>
  <property name="scrollbar" onget="return document.getAnonymousElementByAttribute(this, 'anonid', 'scrollbar');" readonly="true"/>

  <property name="rowCount" onget="return this.vivitree.rowCount;" readonly="true"/>

  <property name="currentIndex" onget="return this.vivitree.currentIndex;" onset="this.vivitree.currentIndex = val; this.updateScrollBtn(); return val;"/>

  <property name="selectedIndex" onget="return this.vivitree.currentIndex;" onset="var res = (this.vivitree.currentIndex = val); this.updateScrollBtn(); return res;"/>

  <property name="selectedItems" onget="return this.vivitree.selectedItems;" onset="var res = (this.vivitree.selectedItems = val); this.updateScrollBtn(); return res;"/>


  <property name="treeBoxObject" onget="return this.vivitree.treeBoxObject;" readonly="true"/>

  <property name="view" onget="return this.vivitree.view;" readonly="true"/>

  <property name="selection" onget="return this.vivitree.selection;" readonly="true"/>

  <property name="datasource" onget="return this.vivitree.datasource" onset="var res = this.vivitree.datasource = val; this.updateScrollBtn(); return res;"/>

    <method name="scrollByLines">
        <parameter name="numLines"/>
        <body><![CDATA[
            this.vivitree.scrollByLines(numLines);

            this.updateScrollBtn();
        ]]>  
        </body>
    </method>

    <method name="scrollByPages">
        <parameter name="numPages"/>
        <body><![CDATA[
            this.vivitree.scrollByPages(numPages);

            this.updateScrollBtn();
        ]]>  
        </body>
    </method>


    <method name="scrollToRow">
        <parameter name="index"/>
        <body><![CDATA[
            this.vivitree.scrollToRow(index);

            this.updateScrollBtn();
        ]]>  
        </body>
    </method>


    <method name="updateScrollBtn">
        <body><![CDATA[
            var currentIndex = this.currentIndex;
            var lastRowIndex = this.rowCount - 1;
            var firstVisible = this.treeBoxObject.getFirstVisibleRow();
            var lastVisible = this.treeBoxObject.getLastVisibleRow();
            this._scrollButtonUp.setAttribute('disabled', (firstVisible == 0) && (currentIndex == -1 || currentIndex == 0));
            this._scrollButtonDown.setAttribute('disabled', (lastVisible >= lastRowIndex) && (currentIndex == -1 || currentIndex == lastRowIndex));
        ]]>
        </body>
    </method>
    <method name="refresh">
        <body><![CDATA[
            this.invalidate();
        ]]>
        </body>
    </method>


    <method name="invalidate">
        <body><![CDATA[
            this.vivitree.invalidate();
            this.updateScrollBtn();
        ]]>
        </body>
    </method>


    <method name="invalidateRange">
        <parameter name="startIndex"/>
        <parameter name="endIndex"/>
        <body><![CDATA[
            this.vivitree.invalidateRange(startIndex, endIndex);
            this.updateScrollBtn();
        ]]>
        </body>
    </method>


    <method name="invalidateRow">
        <parameter name="index"/>
        <body><![CDATA[
            this.vivitree.invalidateRow(index);
        ]]>
        </body>
    </method>


    <method name="ensureRowIsVisible">
        <parameter name="index"/>
        <body><![CDATA[
            this.treeBoxObject.ensureRowIsVisible(index);

            this.updateScrollBtn();
        ]]>
        </body>
    </method>

      <method name="_autorepeatbuttonScroll">
        <parameter name="event"/>
        <body><![CDATA[
          var dir = event.originalTarget == this._scrollButtonUp ? -1 : 1;
          var scrollMode = this.getAttribute('scrollMode') || 'view';
          var scrollUnit = this.getAttribute('scrollUnit') || 'line';

          if (scrollMode == 'view') {
              if (scrollUnit == 'page')
                  this.scrollByPages(dir);
              else
                  this.scrollByLines(dir);
          }
          else {
              var newIndex = this.selectedIndex + dir;
              if (newIndex < 0) newIndex = 0;
              if (newIndex >= this.vivitree.view.rowCount) newIndex = this.vivitree.view.rowCount - 1;
              if (newIndex != this.selectedIndex) {
                  this.selection.select(newIndex);
                  this.ensureRowIsVisible(newIndex);
              }
          }

          event.stopPropagation();
        ]]></body>
      </method>


  </implementation>

</binding>
</bindings>
