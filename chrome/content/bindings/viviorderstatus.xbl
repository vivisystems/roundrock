<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
    <binding id="viviorderstatus">
        <resources>
        </resources>

        <!-- Event Handlers -->
        <handlers>
        </handlers>

        <content>
        <xul:grid anonid="viviorderstatus" class="viviorderstatus" xbl:inherits="flex">
            <xul:columns>
                <xul:column flex="0"/>
                <xul:column flex="1"/>
                <xul:column flex="0"/>
                <xul:column flex="0"/>
                <xul:column flex="1"/>
                <xul:column flex="0"/>
                <xul:column flex="0"/>
                <xul:column flex="1"/>
                <xul:column flex="0"/>
                <xul:column flex="0"/>
                <xul:column flex="1"/>
            </xul:columns>

            <xul:rows id="viviorderstatus_rows">

                <xul:row id="viviorderstatus_row_1">
                    <xul:label id="viviorderstatus_price_level_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="PL"
                               />
                    <xul:textbox id="viviorderstatus_price_level_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                    <xul:label id="viviorderstatus_tax_status_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="TX"
                               />
                    <xul:textbox id="viviorderstatus_tax_status_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                    <xul:label id="viviorderstatus_order_sequence_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="SEQ"
                               />
                    <xul:textbox id="viviorderstatus_order_sequence_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />

                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                </xul:row>

                <xul:row id="viviorderstatus_row_2">

                    <xul:label id="viviorderstatus_service_dest_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="DEST"
                               />
                    <xul:textbox id="viviorderstatus_service_dest_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                    <xul:label id="viviorderstatus_number_cust_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="#CUST"
                               />
                    <xul:textbox id="viviorderstatus_number_cust_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                    <xul:label id="viviorderstatus_check_number_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="CHK"
                               />
                    <xul:textbox id="viviorderstatus_check_number_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                    <xul:separator class="groove-thin" orient="vertical" width="1"/>

                    <xul:label id="viviorderstatus_table_number_label"
                               class="viviorderstatus_field_label small-margin monospace"
                               value="TBL"
                               />
                    <xul:textbox id="viviorderstatus_table_number_value"
                                 class="viviorderstatus_field_value monospace"
                                 disabled="true"
                               />
                </xul:row>
            </xul:rows> 
        </xul:grid>
        </content>
        <implementation>

            <!-- Fields -->

            <!-- Constructor -->
            <constructor>
            <![CDATA[
                //GREUtils.log('[CONSTRUCTOR]: entering');

                var events = GeckoJS.Session.getInstance().events;
                if (events) {
                    events.addListener('change', this.changeHandler, this);
                    events.addListener('remove', this.removeHandler, this);
                    events.addListener('clear', this.clearHandler, this);
                    //GREUtils.log('[CONSTRUCTOR]: event listeners attached');
                }
                else {
                    //GREUtils.log('[CONSTRUCTOR]: failed to get Session events');
                }

                var labels = this.getAttribute('labels').split(',');
                //GREUtils.log('[INITIALIZE]: retrieved labels <' + labels + '>');

                for (var i = 0; i < labels.length; i++) {
                    //GREUtils.log('[INITIALIZE]: applying field <' + labels[i] + '>');
                    switch(i) {

                        case 0: // Price Level
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[0].value = labels[i];
                            break;

                        case 1: // Tax Status
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[3].value = labels[i];
                            break;

                        case 2: // Order Sequence
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[6].value = labels[i];
                            break;

                        case 3: // Order Destination
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[0].value = labels[i];
                            break;

                        case 4: // Number of Customers
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[3].value = labels[i];
                            break;

                        case 5: // Check Number
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[6].value = labels[i];
                            break;

                        case 6: // Table Number
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[9].value = labels[i];
                            break;
                    }
                }
                this.keys = this.getAttribute('keys').split(',');

                //GREUtils.log('[CONSTRUCTOR]: leaving');
            ]]>
            </constructor>

            <!-- destructor -->
            <destructor>
            <![CDATA[
                //GREUtils.log('[DESTRUCTOR]: entering');
                events.removeListener('change', this.changeHandler);
                events.removeListener('remove', this.removeHandler);
                events.removeListener('clear', this.clearHandler);
                //GREUtils.log('[DESTRUCTOR]: leaving');
            ]]>
            </destructor>

            <!-- Methods -->

            <method name="changeHandler">
                <parameter name="evt"/>
                <body>
                <![CDATA[
                    //GREUtils.log('[CHANGE]: entering <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');

                    var key = evt.getData().key;
                    var value = evt.getData().value;
                    var found = -1;
                    
                    for (i = 0; i < this.keys.length; i++) {
                        //GREUtils.log('[CHANGE]: checking key <' + i + '> value <' + this.keys[i] + '>');
                        if (this.keys[i] == key) {
                            found = i;
                            break;
                        }
                    }

                    switch(found) {
                        case 0:
                           // GREUtils.log('[CHANGE]: changing node <' + document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[1].id + '> label to <' + value + '>');
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[1].value = value;
                            break;

                        case 1:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[4].value = value;
                            break;

                        case 2:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[7].value = value;
                            break;

                        case 3:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[1].value = value;
                            break;

                        case 4:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[4].value = value;
                            break;

                        case 5:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[7].value = value;
                            break;

                        case 6:
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[10].value = value;
                            break;

                        default:
                            //GREUtils.log('[CHANGE]: unknown key <' + key + '>');
                        
                    }

                    //GREUtils.log('[CHANGE]: leaving');
                ]]>
                </body>
            </method>

            <method name="removeHandler">
                <parameter name="evt"/>
                <body>
                <![CDATA[
                    //GREUtils.log('[REMOVE]: entering <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');

                    var key = evt.getData();

                    switch(key) {
                        case 'vivipos_fec_price_level':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[1].value = '';
                            break;

                        case 'vivipos_fec_tax_status':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[4].value = '';
                            break;

                        case 'vivipos_fec_order_sequence':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[7].value = '';
                            break;

                        case 'vivipos_fec_order_destination':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[1].value = '';
                            break;

                        case 'vivipos_fec_number_of_customers':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[4].value = '';
                            break;

                        case 'vivipos_fec_check_number':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[7].value = '';
                            break;

                        case 'vivipos_fec_table_number':
                            document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[10].value = '';
                            break;

                        default:
                            //GREUtils.log('[REMOVE]: unknown key <' + key + '>');
                        
                    }

                    //GREUtils.log('[REMOVE]: leaving');
                ]]>
                </body>
            </method>

            <method name="clearHandler">
                <parameter name="evt"/>
                <body>
                <![CDATA[
                    //GREUtils.log('[CLEAR]: entering <' + evt.getType() + '> + <' + GeckoJS.BaseObject.dump(evt.getData()) + '>');

                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[1].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[4].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[0].childNodes[7].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[1].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[4].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[7].value = '';
                    document.getAnonymousNodes(this)[0].childNodes[1].childNodes[1].childNodes[10].value = '';

                    //GREUtils.log('[CLEAR]: leaving');
                ]]>
                </body>
            </method>

        </implementation>
    </binding>
</bindings>
