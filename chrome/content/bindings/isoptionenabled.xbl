<?xml version="1.0"?>
<!DOCTYPE bindings PUBLIC "-//MOZILLA//DTD XBL V1.0//EN" "http://www.mozilla.org/xbl">

<bindings
    xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html="http://www.w3.org/1999/xhtml"
    xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

  <binding id="isoptionenabled">
    <content >
      <xul:box anonid="checkoptionContainer" inherits="class,flex,pack,align,orient,collapsed,hidden">
      <children/>
      </xul:box>
    </content>
    
    <implementation>

    	<constructor><![CDATA[
        
        var events = GeckoJS.Configure.getInstance().events;
        this.option = this.getAttribute('option') || '';
        this.events = events;

        var self = this;
        this.ready = function() {
	    if (self.events) {
		var changeHandler = function (evt) {
		    var key = evt.getData().key;

		    if (key == self.option) {
			self.render();
		    }
		}

		var removeHandler = function (evt) {
		    var key = evt.getData();
		    if (key == self.option) {
			self.render();
		    }
		}

		var clearHandler = function (evt) {
		    self.render();
		}

		self.events.addListener('write', changeHandler, this);
		self.events.addListener('remove', removeHandler, this);
		self.events.addListener('clear', clearHandler, this);
	    }
        
	    self.changeHandler = changeHandler;
	    self.removeHandler = removeHandler;
	    self.clearHandler = clearHandler;

            self.render();
        };

/*
        this.observer = GeckoJS.Observer.newInstance({
                topics: ['acl-session-change'],
                observe: function(aSubject, aTopic, aData) {
                    self.render();
                }
            }).register();
*/
        //window.addEventListener('DOMContentLoaded', this.ready, true);
        window.addEventListener('load', this.ready, true);

        ]]>
        </constructor>

        <destructor><![CDATA[
        //window.removeEventListener('DOMContentLoaded', this.ready, true);
        window.removeEventListener('load', this.ready, true);
        
        if (this.events) {
            this.events.removeListener('change', this.changeHandler);
            this.events.removeListener('remove', this.removeHandler);
            this.events.removeListener('clear', this.clearHandler);
        }
//          this.observer.unregister();
        ]]>
        </destructor>

    <method name="render">
      <body><![CDATA[

        var option = this.getAttribute('option') || '';
        var action = this.getAttribute('action') || 'display';

        var value = GeckoJS.Configure.read(option);

        if (value) {
            if(action =='display') {
                this.setAttribute('hidden', 'false');
            }
            else {
                this.setAttribute('hidden', 'true');
            }
        }else {
            if(action =='display') {
                this.setAttribute('hidden', 'true');
            }
            else {
                this.setAttribute('hidden', 'false');
            }
        }
      ]]>
      </body>
    </method>

    </implementation>

    <handlers>
        
    </handlers>
  </binding>

</bindings>
