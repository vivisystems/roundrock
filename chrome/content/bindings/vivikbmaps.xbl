<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
  <!ENTITY % kbmapsDTD SYSTEM "chrome://vivipos/locale/kbmaps.dtd">
  %kbmapsDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="vivikbmaps">
        <resources>
            <stylesheet src="chrome://vivipos/skin/bindings/vivikbmaps.css" />
        </resources>

        <content>
            <xul:hbox xbl:inherits="class,pack,width,height,disabled,flex,popupheight,popupwidth">
                <xul:menulist anonid="kbmaps-menulist" oncommand="updateKbmap(this.selectedIndex)" hidden="true"
                              xbl:inherits="class=listboxClass">
                    <xul:menupopup style="height: 300px;">
                    </xul:menupopup>
                </xul:menulist>
                <xul:image anonid="kbmaps-image" />
                <xul:label anonid="kbmaps-label" />
                <xul:spacer flex="1" />
                <xul:button anonid="kbmaps-button" oncommand="showKbmapPanel()" hidden="false" 
                            xbl:inherits="class=kbmapButtonClass,label"/>

                <xul:stack anonid="kbmaps-stack">
                </xul:stack>

            </xul:hbox>

            <xul:panel anonid="kbmaps-panel" position="overlap" xbl:inherits="class=popupClass">
                <xul:vbox flex="1" clas="panelClass">
                    <xul:label xbl:inherits="value=popTitle" />
                    <xul:viviscrollablebuttonpanel anonid="kbmaps-buttonpanel" flex="1"
                                                   cols="4" rows="4" labelField="label" imageField="image"
                                                   ensureVisible="true"
                                                   oncommand="updateKbmap(this.selectedIndex); hideKbmapPanel();"
                                                   xbl:inherits="cols,rows,buttonClass,scrollUpClass,scrollDownClass">
                        <xul:spacer flex="1" />
                    </xul:viviscrollablebuttonpanel>
                    <xul:hbox xbl:inherits="class=toolbarClass">
                        <xul:button oncommand="hideKbmapPanel()" xbl:inherits="label=cancelLabel,class=cancelClass"/>
                    </xul:hbox>
                </xul:vbox>
            </xul:panel>
        </content>

        <xbl:implementation>

            <field name="kbmaps">
                [
                        {label: "&kbmap.Albania;", value: "al", image: ""},
                        {label: "&kbmap.Andorra;", value: "ad", image: ""},
                        {label: "&kbmap.Arabic;", value: "ara", image: ""},
                        {label: "&kbmap.Armenia;", value: "am", image: ""},
                        {label: "&kbmap.Azerbaijan;", value: "az", image: ""},
                        {label: "&kbmap.Bangladesh;", value: "bd", image: ""},
                        {label: "&kbmap.Belarus;", value: "by", image: ""},
                        {label: "&kbmap.Belgium;", value: "be", image: ""},
                        {label: "&kbmap.Bosnia_and_Herzegovina;", value: "ba", image: ""},
                        {label: "&kbmap.Brazil;", value: "br", image: ""},
                        {label: "&kbmap.Bulgaria;", value: "bg", image: ""},
                        {label: "&kbmap.Canada;", value: "ca", image: ""},
                        {label: "&kbmap.China;", value: "cn", image: ""},
                        {label: "&kbmap.Congo_Democratic_Republic_of_the;", value: "cd", image: ""},
                        {label: "&kbmap.Croatia;", value: "hr", image: ""},
                        {label: "&kbmap.Czechia;", value: "cz", image: ""},
                        {label: "&kbmap.Denmark;", value: "dk", image: ""},
                        {label: "&kbmap.Esperanto;", value: "epo", image: ""},
                        {label: "&kbmap.Estonia;", value: "ee", image: ""},
                        {label: "&kbmap.Ethiopia;", value: "et", image: ""},
                        {label: "&kbmap.Faroe_Islands;", value: "fo", image: ""},
                        {label: "&kbmap.Finland;", value: "fi", image: ""},
                        {label: "&kbmap.France;", value: "fr", image: ""},
                        {label: "&kbmap.Georgia;", value: "ge", image: ""},
                        {label: "&kbmap.Germany;", value: "de", image: ""},
                        {label: "&kbmap.Ghana;", value: "gh", image: ""},
                        {label: "&kbmap.Greece;", value: "gr", image: ""},
                        {label: "&kbmap.Guinea;", value: "gn", image: ""},
                        {label: "&kbmap.Hungary;", value: "hu", image: ""},
                        {label: "&kbmap.Iceland;", value: "is", image: ""},
                        {label: "&kbmap.India;", value: "in", image: ""},
                        {label: "&kbmap.Iran;", value: "ir", image: ""},
                        {label: "&kbmap.Iraq;", value: "iq", image: ""},
                        {label: "&kbmap.Ireland;", value: "ie", image: ""},
                        {label: "&kbmap.Israel;", value: "il", image: ""},
                        {label: "&kbmap.Italy;", value: "it", image: ""},
                        {label: "&kbmap.Japan;", value: "jp", image: ""},
                        {label: "&kbmap.Japan_PC_98xx_Series;", value: "nec_vndr_jp", image: ""},
                        {label: "&kbmap.Kazakhstan;", value: "kz", image: ""},
                        {label: "&kbmap.Korea_Republic_of;", value: "kr", image: ""},
                        {label: "&kbmap.Kyrgyzstan;", value: "kg", image: ""},
                        {label: "&kbmap.Laos;", value: "la", image: ""},
                        {label: "&kbmap.Latin_American;", value: "latam", image: ""},
                        {label: "&kbmap.Lithuania;", value: "lt", image: ""},
                        {label: "&kbmap.Latvia;", value: "lv", image: ""},
                        {label: "&kbmap.Macedonia;", value: "mk", image: ""},
                        {label: "&kbmap.Maldives;", value: "mv", image: ""},
                        {label: "&kbmap.Malta;", value: "mt", image: ""},
                        {label: "&kbmap.Maori;", value: "mao", image: ""},
                        {label: "&kbmap.Mongolia;", value: "mn", image: ""},
                        {label: "&kbmap.Montenegro;", value: "me", image: ""},
                        {label: "&kbmap.Morocco;", value: "ma", image: ""},
                        {label: "&kbmap.Nepal;", value: "np", image: ""},
                        {label: "&kbmap.Netherlands;", value: "nl", image: ""},
                        {label: "&kbmap.Nigeria;", value: "ng", image: ""},
                        {label: "&kbmap.Norway;", value: "no", image: ""},
                        {label: "&kbmap.Pakistan;", value: "pk", image: ""},
                        {label: "&kbmap.Poland;", value: "pl", image: ""},
                        {label: "&kbmap.Portugal;", value: "pt", image: ""},
                        {label: "&kbmap.Romania;", value: "ro", image: ""},
                        {label: "&kbmap.Russia;", value: "ru", image: ""},
                        {label: "&kbmap.Serbia;", value: "rs", image: ""},
                        {label: "&kbmap.Slovakia;", value: "sk", image: ""},
                        {label: "&kbmap.Slovenia;", value: "si", image: ""},
                        {label: "&kbmap.South_Africa;", value: "za", image: ""},
                        {label: "&kbmap.Spain;", value: "es", image: ""},
                        {label: "&kbmap.Sweden;", value: "se", image: ""},
                        {label: "&kbmap.Switzerland;", value: "ch", image: ""},
                        {label: "&kbmap.Syria;", value: "sy", image: ""},
                        {label: "&kbmap.Tajikistan;", value: "tj", image: ""},
                        {label: "&kbmap.Thailand;", value: "th", image: ""},
                        {label: "&kbmap.Turkey;", value: "tr", image: ""},
                        {label: "&kbmap.Ukraine;", value: "ua", image: ""},
                        {label: "&kbmap.United_Kingdom;", value: "gb", image: ""},
                        {label: "&kbmap.USA;", value: "us", image: ""},
                        {label: "&kbmap.Uzbekistan;", value: "uz", image: ""},
                        {label: "&kbmap.Vietnam;", value: "vn", image: ""}
                ]
            </field>
            <field name="button">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-button");
            </field>

            <field name="type">
                this.getAttribute("type") || 'button';
            </field>

            <field name="panel">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-panel");
            </field>
            
            <field name="label">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-label");
            </field>

            <field name="image">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-image");
            </field>

            <field name="buttonpanel">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-buttonpanel");
            </field>

            <field name="menulist">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-menulist");
            </field>

            <field name="stack">
            document.getAnonymousElementByAttribute(this, "anonid", "kbmaps-stack");
            </field>

            <property name="currentKbmap" onget="return this._currentKbmap;" readonly="true" />

            <property name="selectedIndex" onget="return this._selectedIndex;" onset="this._selectedIndex=val; return val;" />

            <property name="selectedKbmap" onget="return this._selectedKbmap;" onset="this._selectedKbmap=val; this._selectedIndex=this.findKbmap(val); return val;" />

            <xbl:constructor><![CDATA[
                var self = this;
                //this.ready = function() {
                    self.init();
                //};
                //window.addEventListener('load', this.ready, true);
            ]]>
            </xbl:constructor>

            <destructor>
            <![CDATA[
               //window.removeEventListener('load', this.ready, true);
            ]]>
            </destructor>

            <xbl:method name="init">
                <xbl:body><![CDATA[

                // ubuntu timezone
                var kb = "us";
                try {
                    var kbFile = new GeckoJS.File('/etc/kbmap');
                    if (kbFile.exists()) {
                        kbFile.open("r");
                        kb =  kbFile.readLine() || "us";
                        kbFile.close();
                    }
                    delete kbFile
                }catch(e) {
                }

                this.screenwidth = GeckoJS.Configure.read('vivipos.fec.mainscreen.width') || 800;
                this.screenheight = GeckoJS.Configure.read('vivipos.fec.mainscreen.height') || 600;

                this._currentKbmap = kb;
                this.selectedKbmap = null;
                this.selectedIndex = -1;

                var index = this.findKbmap(kb);

                // use menu or button
                var menulist = this.menulist;
                var button = this.button;

                if (this.type == 'button') {
                    menulist.hidden = true;
                    button.hidden = false;
                }
                else {
                    menulist.hidden = false;
                    button.hidden = true;

                    this.kbmaps.forEach(function(kbmap) {
                        menulist.appendItem(kbmap.label, kbmap.value);
                    }, this);

                    menulist.selectedIndex = index;
                }

                this.updateKbmap(index);
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="showKbmapPanel">
                <xbl:body><![CDATA[

                this.buttonpanel.datasource = this.kbmaps;
                this.buttonpanel.selectedIndex = this.selectedIndex;
                this.buttonpanel.selectedItems = [this.selectedIndex];
                this.buttonpanel.ensureIndexIsVisible(this.selectedIndex);

                var width = this.getAttribute('popupwidth') || this.screenwidth;
                var height = this.getAttribute('popupheight') || this.screenheight;

                this.panel.sizeTo(width, height);
                this.panel.openPopupAtScreen((this.screenwidth - width) / 2, (this.screenheight - height) / 2);
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="hideKbmapPanel">
                <xbl:body><![CDATA[

                this.panel.hidePopup();
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="findKbmap">
                <xbl:parameter name="layout"/>
                <xbl:body><![CDATA[
                for (var i = 0; i < this.kbmaps.length; i++) {
                    if (this.kbmaps[i].value == layout) {
                        return i;
                    }
                }
                return -1;
                ]]>
                </xbl:body>
            </xbl:method>


            <xbl:method name="updateKbmap">
                <xbl:parameter name="index"/>
                <xbl:body><![CDATA[

                var klabel = '';
                var kbmap = '';
                var kimage = '';

                if (index == null) index = this.selectedIndex;
                if (index > -1 && index < this.kbmaps.length) {
                    klabel = this.kbmaps[index].label;
                    kbmap = this.kbmaps[index].value;
                    kimage = this.kbmaps[index].image;

                    this.selectedKbmap = kbmap;
                }
                else {
                    this.selectedKbmap = this.currentKbmap;
                }
                this.selectedIndex = index;

                if (this.type == 'button') {
                    //this.button.label = klabel;
                    //this.button.image = 'chrome://vivipos/skin/flags/tb_' + kbmap + '.png';
                    var label = this.label;
                    var image = this.image;
                    this.label.value = klabel;
                    this.image.src = 'chrome://vivipos/skin/flags/tb_' + kbmap + '.png';
                }

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="changeOSKbmap">
                <xbl:body><![CDATA[

                    // Which Kbmap did the user select?
                    var newKbmap = this.selectedKbmap;

                    try {

                        // write Kbmap file
                        var kbFile = new GeckoJS.File('/etc/kbmap', true);
                        kbFile.open("w");
                        kbFile.write(newKbmap+"\n");
                        kbFile.close();
                        delete kbFile;

                    }catch (e) {
                        // maybe permision deny
                    }

                    // restart virtual keyboard
                    try {
                        var resetKeyboardScript = new GeckoJS.File('/data/scripts/reset_keyboard.sh');
                        if (resetKeyboardScript.exists()) {
	                    resetKeyboardScript.run([], true); // no arguments and blocking.
                        }
                        delete resetKeyboardScript;
                        resetKeyboardScript = null;
                    }catch(e) {
                    }

                    return false;
                ]]>
                </xbl:body>
            </xbl:method>

        </xbl:implementation>

    </binding>

</bindings>
