<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="vivilocaleslistbox">
        <resources>
            <stylesheet src="chrome://vivipos/skin/bindings/vivilocaleslistbox.css" />
        </resources>

        <content>
            <xul:listbox anonid="locales-listbox" crop="none" xbl:inherits="rows,flex,class,crop,dir,pack,align">
            </xul:listbox>
        </content>

        <xbl:implementation>

            <field name="listbox">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-listbox");
            </field>

            <property name="package" onget="return this.getAttribute('package')" onset="this.setAttribute('package', val); return val;"/>

            <property name="currentLocale" onget="return this._currentLocale;" readonly="true" />
            
            <property name="selectedLocale" onget="return this.listbox.selectedItem.value;" readonly="true" />

            <xbl:constructor><![CDATA[
                var self = this;
                //this.ready = function() {
                    self.initListbox();
                //};
                //window.addEventListener('load', this.ready, true);
            ]]>
            </xbl:constructor>

            <destructor>
            <![CDATA[
               //window.removeEventListener('load', this.ready, true);
            ]]>
            </destructor>

            <xbl:method name="initListbox">
                <xbl:body><![CDATA[
                var package = this.package;
                var listbox = this.listbox;

                if (!package) return;

                // Query available and selected locales
                var chromeRegInstance = Components.classes["@mozilla.org/chrome/chrome-registry;1"].getService();
                var xulChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIXULChromeRegistry);
                var toolkitChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIToolkitChromeRegistry);

                var selectedLocale = xulChromeReg.getSelectedLocale(package);

                this._currentLocale = selectedLocale;

                var availableLocales = toolkitChromeReg.getLocalesForPackage(package);

                // Render locale menulist
                const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

                var selectedItem = null;

                while(availableLocales.hasMore()) {

                    var locale = availableLocales.getNext();

                    var listitem = document.createElementNS(XUL_NS, "listitem");
                    listitem.setAttribute("value", locale);
                    listitem.setAttribute("label", _(locale));
                    listitem.setAttribute("class", "listitem-iconic");
                    listitem.setAttribute("image", "chrome://vivipos/skin/flags/tb_" + locale + ".png");

                    if (locale == selectedLocale) {
                        // Is this the current locale?
                        selectedItem = listitem;
                    }

                    listbox.appendChild(listitem);
                }

                // Highlight current locale
                listbox.selectedItem = selectedItem;

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="reloadChrome">
                <xbl:body><![CDATA[

                    try {
                        var chromeRegInstance = Components.classes["@mozilla.org/chrome/chrome-registry;1"].getService();
                        var xulChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIXULChromeRegistry);
                        xulChromeReg.reloadChrome();

                    } catch(err) {
                    }

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="changeLocale">
                <xbl:body><![CDATA[

                    try {
                        // Which locale did the user select?
                        var listbox = this.listbox;
                        var newLocale = this.selectedLocale;

                        // Write preferred locale to local user config
                        var prefs = Components.classes["@mozilla.org/preferences-service;1"].
                                    getService(Components.interfaces.nsIPrefBranch);
                        prefs.setCharPref("general.useragent.locale", newLocale);

                    } catch(err) {
                    }

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="changeOSLocale">
                <xbl:body><![CDATA[

                    try {

                        // Which locale did the user select?
                        var listbox = this.listbox;
                        var newLocale = this.selectedLocale;

                        var loc = newLocale.split('-');
                        var langENV = loc[0] + '_' + loc[1] + '.UTF-8';

                        // ubuntu locale environment
                        var envFile = new GeckoJS.File('/etc/environment');
                        var osEnvs ;
                        if (envFile.exists()) {
                            envFile.open("r");
                            osEnvs = envFile.readAllLine();
                            envFile.close();
                        }
                        delete env;
                        
                        var newEnvs = [];
                        for each(var envBuf in osEnvs) {
                            if (envBuf.match(/^LANGUAGE=/)) {
                                var languageString = 'LANGUAGE="' +
                                                 loc[0] + '_' + loc[1] + ':'+
                                                 loc[0] + ':en_US:en"';
                                newEnvs.push(languageString);
                            }else if(envBuf.match(/^LANG=/)) {
                                var langString = 'LANG="'+langENV+'"';
                                newEnvs.push(langString);
                            }else {
                                newEnvs.push(envBuf);
                            }
                        }

                        var newEnvString = newEnvs.join("\n") + "\n";

                        // write environment file
                        try {
                            var envFile2 = new GeckoJS.File('/etc/environment', true);
                            envFile2.open("w");
                            envFile2.write(newEnvString);
                            envFile2.close();

                            delete envFile2;
                            
                        }catch(e) {};


                        // set environment
                        try {
                            var envSvc = Components.classes["@mozilla.org/process/environment;1"]
                                      .getService(Components.interfaces.nsIEnvironment);

                            envSvc.set('LANG', langENV);
                            envSvc.set('LC_TIME', langENV);
                            envSvc.set('LC_MESSAGES', langENV);
                            envSvc.set('LC_NUMERIC', langENV);
                            envSvc.set('LC_MONETARY', langENV);
                            envSvc.set('LC_ALL', langENV);


                        }catch(e) {
                        }

                        // locale gen
                        try {
                            var localeGenScript = new GeckoJS.File('/data/scripts/locale_gen.sh');
                            if (localeGenScript.exists()) {
				localeGenScript.run([], true); // no arguments and blocking.
                            }
                            delete localeGenScript;
                            localeGenScript = null;
                        }catch(e) {
                        }

                        return true;

                    } catch(err) {
                    }
                    return false;

                ]]>
                </xbl:body>
            </xbl:method>

        </xbl:implementation>

    </binding>

</bindings>
