<?xml version="1.0"?>

<!DOCTYPE bindings [
  <!ENTITY % globalDTD SYSTEM "chrome://global/locale/global.dtd">
  %globalDTD;
]>

<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="vivilocaleslistbox">
        <resources>
            <stylesheet src="chrome://vivipos/skin/bindings/vivilocaleslistbox.css" />
        </resources>

        <content>
            
            <xul:stringbundleset>
                <xul:stringbundle anonid="bundleRegions"      src="chrome://global/locale/regionNames.properties"/>
                <xul:stringbundle anonid="bundleLanguages"    src="chrome://global/locale/languageNames.properties"/>
            </xul:stringbundleset>
            
            <xul:hbox xbl:inherits="class,pack,width,height,disabled,flex,popupheight,popupwidth">
                <xul:listbox anonid="locales-listbox" crop="none" xbl:inherits="rows,flex,class=listboxClass,crop,dir,pack,align,seltype"
                             onselect="updateLocale(this.selectedIndex)">
                </xul:listbox>
                <xul:image anonid="locales-image" />
                <xul:label anonid="locales-label" />
                <xul:spacer anonid="locales-spacer" flex="1" />
                <xul:button anonid="locales-button" oncommand="showLocalesPanel()" hidden="false"
                            xbl:inherits="class=localeButtonClass,label"/>
            </xul:hbox>

            <xul:panel anonid="locales-panel" position="overlap" pack="center" align="center" xbl:inherits="class=popupClass">
                <xul:vbox>
                <xul:label xbl:inherits="value=popTitle" />
                <xul:viviscrollablebuttonpanel anonid="locales-buttonpanel" flex="1"
                                               cols="4" rows="4" labelField="label" imageField="image"
                                               ensureVisible="true"
                                               oncommand="updateLocale(this.selectedIndex); hideLocalesPanel();"
                                               xbl:inherits="cols,rows,class=panelClass,buttonClass,scrollUpClass,scrollDownClass">
                    <xul:spacer flex="1" />
                </xul:viviscrollablebuttonpanel></xul:vbox>
            </xul:panel>
        </content>

        <xbl:implementation>

            <field name="bundleLanguages">
            document.getAnonymousElementByAttribute(this, "anonid", "bundleLanguages");
            </field>

            <field name="bundleRegions">
            document.getAnonymousElementByAttribute(this, "anonid", "bundleRegions");
            </field>

            <field name="listbox">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-listbox");
            </field>

            <field name="type">
                this.getAttribute("type") || "button";
            </field>

            <field name="panel">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-panel");
            </field>

            <field name="button">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-button");
            </field>

            <field name="label">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-label");
            </field>

            <field name="image">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-image");
            </field>

            <field name="buttonpanel">
            document.getAnonymousElementByAttribute(this, "anonid", "locales-buttonpanel");
            </field>

            <property name="package" onget="return this.getAttribute('package')" onset="this.setAttribute('package', val); return val;"/>

            <property name="currentLocale" onget="return this._currentLocale;" readonly="true" />
            
            <property name="selectedIndex" onget="return this._selectedIndex;" readonly="true" />

            <property name="selectedLocale" onget="return this._selectedLocale;" readonly="true" />

            <xbl:constructor><![CDATA[
                var self = this;

                this.ready = false;
                this.readyRuned = false;

                this.ready = function() {
                    if(!self.readyRuned) {
                        self.init();
                        self.readyRuned = true;
                    }
                };
                
                // createElement
                this.addEventListener('load', this.ready, true);

                // static .xul
                window.addEventListener('load', this.ready, true);

            ]]>
            </xbl:constructor>

            <destructor>
            <![CDATA[

                if (this.ready) {
                    window.removeEventListener('load', this.ready, true);
                }

            ]]>
            </destructor>

            <xbl:method name="init">
                <xbl:body><![CDATA[
                var package = this.package;
                var listbox = this.listbox;
                var button = this.button;

                if (!package) return;

                this.screenwidth = GeckoJS.Configure.read('vivipos.fec.mainscreen.width') || 800;
                this.screenheight = GeckoJS.Configure.read('vivipos.fec.mainscreen.height') || 600;
                
                // Query available and selected locales
                var chromeRegInstance = Components.classes["@mozilla.org/chrome/chrome-registry;1"].getService();
                var xulChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIXULChromeRegistry);
                var toolkitChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIToolkitChromeRegistry);

                var selectedLocale = xulChromeReg.getSelectedLocale(package);

                this._currentLocale = selectedLocale;
                this._selectedLocale = selectedLocale;
                this._selectedIndex = -1;

                var availableLocales = toolkitChromeReg.getLocalesForPackage(package);

                // convert locales into array
                var locales = [];
                var index = 0;
                while(availableLocales.hasMore()) {
                    var locale = availableLocales.getNext();

                    locales.push({label: this.getLanguageName(locale),
                                  value: locale,
                                  image: 'chrome://vivipos/skin/flags/tb_' + locale + '.png'});

                    if (locale == selectedLocale) {
                        this._selectedIndex = index;
                    }
                    
                    index++;
                }

                this.locales = locales;

                if (this.type == 'button') {
                    // hide listbox
                    listbox.hidden = true;
                    button.hidden = false;
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-image").hidden = false;
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-label").hidden = false;
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-spacer").hidden = false;
                }
                else {

                    // hide button
                    button.hidden = true
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-image").hidden = true
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-label").hidden = true
                    document.getAnonymousElementByAttribute(this, "anonid", "locales-spacer").hidden = true
                    listbox.hidden = false;
                    
                    // Render locale menulist
                    const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

                    locales.forEach(function(locale) {
                        var listitem = document.createElementNS(XUL_NS, "listitem");
                        listitem.setAttribute("value", locale.value);
                        listitem.setAttribute("label", locale.label);
                        listitem.setAttribute("class", "listitem-iconic");
                        listitem.setAttribute("image", "chrome://vivipos/skin/flags/tb_" + locale.value + ".png");

                        listbox.appendChild(listitem);
                    }, this);

                    // Highlight current locale
                    if (this.selectedIndex > -1) {
                        listbox.selectedIndex = this.selectedIndex;
                    }
                }
                this.updateLocale(this.selectedIndex);
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="getLanguageName">
                <xbl:parameter name="abCD"/>
                <xbl:body><![CDATA[
                    // abCD ex. zh-TW
                    var abCDPairs = abCD.split("-");      // ab[-cd]
                    var useABCDFormat = abCDPairs.length > 1;
                    var ab = useABCDFormat ? abCDPairs[0] : abCD;
                    var cd = (useABCDFormat ? abCDPairs[1] : "").toLowerCase();

                    var name = "";
                    var language = "";
                    var region = "";

                    if (ab) {
                          
                          try {
                            language = this.bundleLanguages.getString(ab);
                          }
                          catch (e) {  }

                          if (useABCDFormat) {
                            try {
                              region = this.bundleRegions.getString(cd);
                            }
                            catch (e) {  }
                          }
                     }

                     if (useABCDFormat) {
                        name = language + " - " + region + " [" + abCD + "]";
                     }else {
                        name = language + " [" + abCD + "]";
                     }

                     return name;

                ]]>
                </xbl:body>
            </xbl:method>


            <xbl:method name="updateLocale">
                <xbl:parameter name="index"/>
                <xbl:body><![CDATA[
                if (index == null) {
                    this.selectedLocale == this.currentLocale;
                    this.selectedIndex = -1;
                }
                else {
                    this._selectedIndex = index;
                }

                if (index > -1 && index < this.locales.length) {
                    this._selectedLocale = this.locales[index].value;

                    if (this.type == 'button') {
                        var button = this.button;
                        var label = this.label;
                        var image = this.image;

                        this.label.value = this.locales[index].label;
                        this.image.src = "chrome://vivipos/skin/flags/tb_" + this.locales[index].value + ".png";
                        //this.button.label = this.locales[index].label;
                        //this.button.image = "chrome://vivipos/skin/flags/tb_" + this.locales[index].value + ".png";
                    }
                }
                else if (this.type == 'button') {
                    //this.button.label = '';
                    //this.button.image = '';
                    this.label.value = '';
                    this.image.src = '';
                }
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="showLocalesPanel">
                <xbl:body><![CDATA[
                this.buttonpanel.datasource = this.locales;
                this.buttonpanel.selectedIndex = this.selectedIndex;
                this.buttonpanel.selectedItems = [this.selectedIndex];
                this.buttonpanel.ensureIndexIsVisible(this.selectedIndex);

                var width = this.getAttribute('popupwidth') || this.screenwidth;
                var height = this.getAttribute('popupheight') || this.screenheight;
                this.panel.sizeTo(width, height);
                this.panel.openPopupAtScreen((this.screenwidth - width) / 2, (this.screenheight - height) / 2);
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="hideLocalesPanel">
                <xbl:body><![CDATA[

                this.panel.hidePopup();
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="reloadChrome">
                <xbl:body><![CDATA[

                    try {
                        var chromeRegInstance = Components.classes["@mozilla.org/chrome/chrome-registry;1"].getService();
                        var xulChromeReg = chromeRegInstance.QueryInterface(Components.interfaces.nsIXULChromeRegistry);
                        xulChromeReg.reloadChrome();

                    } catch(err) {
                    }

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="changeLocale">
                <xbl:body><![CDATA[

                    try {
                        // Which locale did the user select?
                        var newLocale = this.selectedLocale;

                        // Write preferred locale to local user config
                        var prefs = Components.classes["@mozilla.org/preferences-service;1"].
                                    getService(Components.interfaces.nsIPrefBranch);
                        prefs.setCharPref("general.useragent.locale", newLocale);

                    } catch(err) {
                    }

                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="changeOSLocale">
                <xbl:body><![CDATA[

                    try {
                        var newLocale = this.selectedLocale;

                        var loc = newLocale.split('-');
                        var langENV = "";

                        if (loc.length >=2) {
                            langENV = loc[0] + '_' + loc[1] + '.UTF-8';
                        }else {
                            langENV = loc[0] + '.UTF-8';
                        }

                        // ubuntu locale environment
                        var envFile = new GeckoJS.File('/etc/environment');
                        var osEnvs ;
                        if (envFile.exists()) {
                            envFile.open("r");
                            osEnvs = envFile.readAllLine();
                            envFile.close();
                        }
                        delete env;
                        
                        var newEnvs = [];
                        for each(var envBuf in osEnvs) {
                            if (envBuf.match(/^LANGUAGE=/)) {
                                var languageString = 'LANGUAGE="' +
                                                 (loc.length >=2 ? (loc[0] + '_' + loc[1] + ':') : "")+
                                                 loc[0] + ':en_US:en"';
                                newEnvs.push(languageString);
                            }else if(envBuf.match(/^LANG=/)) {
                                var langString = 'LANG="'+langENV+'"';
                                newEnvs.push(langString);
                            }else {
                                newEnvs.push(envBuf);
                            }
                        }

                        var newEnvString = newEnvs.join("\n") + "\n";

                        // write environment file
                        try {
                            var envFile2 = new GeckoJS.File('/etc/environment', true);
                            envFile2.open("w");
                            envFile2.write(newEnvString);
                            envFile2.close();

                            delete envFile2;
                            
                        }catch(e) {};


                        // set environment
                        try {
                            var envSvc = Components.classes["@mozilla.org/process/environment;1"]
                                      .getService(Components.interfaces.nsIEnvironment);

                            envSvc.set('LANG', langENV);
                            envSvc.set('LC_TIME', langENV);
                            envSvc.set('LC_MESSAGES', langENV);
                            envSvc.set('LC_NUMERIC', langENV);
                            envSvc.set('LC_MONETARY', langENV);
                            envSvc.set('LC_ALL', langENV);


                        }catch(e) {
                        }

                        // locale gen
                        try {
                            var localeGenScript = new GeckoJS.File('/data/scripts/locale_gen.sh');
                            if (localeGenScript.exists()) {
                                localeGenScript.run([], true); // no arguments and blocking.
                            }
                            delete localeGenScript;
                            localeGenScript = null;
                        }catch(e) {
                        }

                        return true;

                    } catch(err) {
                    }
                    return false;

                ]]>
                </xbl:body>
            </xbl:method>

        </xbl:implementation>

    </binding>

</bindings>
