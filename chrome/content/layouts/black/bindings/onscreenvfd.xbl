<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <binding id="onscreenvfd">

        <content>
            <xul:vbox flex="1" xbl:inherits="orient,align">
                <xul:hbox xbl:inherits="class=messageRowClass">
                    <xul:textbox anonid="label0_1_label" disabled="true" xbl:inherits="class=messageLabelClass,size=messageLabelSize"></xul:textbox>
                    <xul:textbox anonid="label0_1_value" flex="1" disabled="true" xbl:inherits="class=messageValueClass,size=messageValueSize"></xul:textbox>
                </xul:hbox>
                <xul:hbox flex="1" xbl:inherits="class=summaryRowClass">
                    <xul:vbox flex="1" xbl:inherits="class=totalClass">
                        <xul:textbox anonid="label0_0_label" disabled="true" xbl:inherits="class=totalLabelClass,size=totalLabelSize"></xul:textbox>
                        <xul:textbox anonid="label0_0_value" disabled="true" flex="1" xbl:inherits="class=totalValueClass,size=totalValueSize"></xul:textbox>
                    </xul:vbox>
                    <xul:vbox xbl:inherits="class=paymentClass">
                        <xul:textbox anonid="label1_0_label" disabled="true" xbl:inherits="class=paymentLabelClass,size=paymentLabelSize"></xul:textbox>
                        <xul:textbox anonid="label1_0_value" disabled="true" xbl:inherits="class=paymentValueClass,size=paymentValueSize"></xul:textbox>
                    </xul:vbox>
                    <xul:vbox xbl:inherits="class=changeClass">
                        <xul:textbox anonid="label1_1_label" disabled="true" xbl:inherits="class=changeLabelClass,size=changeLabelSize"></xul:textbox>
                        <xul:textbox anonid="label1_1_value" disabled="true" xbl:inherits="class=changeValueClass,size=changeValueSize"></xul:textbox>
                    </xul:vbox>
                </xul:hbox>
            </xul:vbox>
            <html:div anonid="detectFontWidthContainer" style="display: none;"></html:div>
        </content>

        <xbl:implementation>

            <xbl:field name="roundPrecision">0</xbl:field>
            <field name="_hideInput">false</field>
            <field name="_label0_0_label">null</field>
            <field name="_label0_0_value">null</field>
            <field name="_label0_1_label">null</field>
            <field name="_label0_1_value">null</field>
            <field name="_label1_0_label">null</field>
            <field name="_label1_0_value">null</field>
            <field name="_label1_1_label">null</field>
            <field name="_label1_1_value">null</field>
            <field name="_fontWidth0_0">10</field>
            <field name="_fontWidth0_1">10</field>
            <field name="_fontWidth1_0">10</field>
            <field name="_fontWidth1_1">10</field>
            <field name="_inputController">null</field>
            <field name="_fromKeypad">false</field>

            <constructor>
            <![CDATA[

                this._label0_0_label = document.getAnonymousElementByAttribute(this, "anonid", "label0_0_label");
                this._label0_1_label = document.getAnonymousElementByAttribute(this, "anonid", "label0_1_label");
                this._label1_0_label = document.getAnonymousElementByAttribute(this, "anonid", "label1_0_label");
                this._label1_1_label = document.getAnonymousElementByAttribute(this, "anonid", "label1_1_label");

                this._label0_0_value = document.getAnonymousElementByAttribute(this, "anonid", "label0_0_value");
                this._label0_1_value = document.getAnonymousElementByAttribute(this, "anonid", "label0_1_value");
                this._label1_0_value = document.getAnonymousElementByAttribute(this, "anonid", "label1_0_value");
                this._label1_1_value = document.getAnonymousElementByAttribute(this, "anonid", "label1_1_value");

                this.keypadevents = GeckoJS.Controller.getInstanceByName('Keypad').events;
                this.cartevents = GeckoJS.Controller.getInstanceByName('Cart').events;
                this.cartQueueEvents = GeckoJS.Controller.getInstanceByName('CartQueue').events;
                this.mainevents = GeckoJS.Controller.getInstanceByName('Main').events;

                this._fontWidth0_0 = this._detectFontWidth(this._label0_0_value);
                this._fontWidth0_1 = this._detectFontWidth(this._label0_1_value);
                this._fontWidth1_0 = this._detectFontWidth(this._label1_0_value);
                this._fontWidth1_1 = this._detectFontWidth(this._label1_1_value);

                var self = this;

                this.onGetSubtotal = function(evt) {
                    var transaction = evt.data;

                    if (transaction) {
                        self.setText0_0(_('TAL'), transaction.getTotal(true));
                        self.setText1_1(_('REM'), transaction.getRemainTotal(true));
                        if (transaction.data != null && transaction.data.status == 1) {
                            self.setText1_1(_('CHG'), self.format(0-transaction.getRemainTotal(false)));
                        }
                        self.setText1_0(_('PAY'), transaction.getPaymentSubtotal(true));
                    } else {
                        self.onClear(evt);
                    }
                }


                this.onAddBuffer = function(evt) {

                    if(self._inputController) {
                        self._inputController.value = evt.data;
                    }else {
                        if (evt.data.length > 0) {
                            self.setText0_1((self.hideInput ? '' : _('I')) + ': ' + evt.data, true);
                        }
                        else {
                            if (this._fromKeypad) {
                                self.setText0_1('', true);
                            }
                        }
                    }
                }

                this.onClearBuffer = function(evt) {

                    if(self._inputController) {
                        self._inputController.value = evt.data;
                    }else {
                        if (this._fromKeypad) self.setText0_1('', true);
                    }
                }

                this.onSetQty = function(evt) {
                    self.setText0_1(_('QTY') + ': ' + evt.data);
                }

                this.onClear = function(evt) {

                    if (this.hideInput) {
                        self.setText0_1('');
                        self.setText0_0(_('Change Clerk'), '');
                        self.setText1_1('', '');
                        self.setText1_0('', '');
                    }
                    else {
                        if (evt) var transaction = evt.data;
                        else var transaction = null;

                        var total = "0";
                        var remain = "0";
                        var payment = "0";

                        if (transaction != null && !(transaction.isSubmit() || transaction.isCancel())) {
                            total = transaction.getTotal(true);
                            remain = transaction.getRemainTotal(true);
                            payment = transaction.getPaymentSubtotal(true);
                        }else {
                            total = this.format(0);
                            remain = this.format(0);
                            payment = this.format(0);
                        }

                        self.setText0_1('');
                        self.setText0_0(_('TAL'), total);
                        self.setText1_1(_('REM'), remain);
                        self.setText1_0(_('PAY'), payment);
                    }
                }

                this.afterCancel = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null || typeof transaction.data == "undefined") {
                        self.afterCancel(evt);
                    }
                }

                this.afterCancel = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null || typeof transaction.data == "undefined") {
                        self.setText0_1('');
                    } else { //return;
                        self.setText0_1(_('CANCELLED') + ': ' + _('SEQ#') + transaction.data.seq);
                    }
                    self.setText0_0(_('TAL'), '');
                    self.setText1_0(_('PAY'), '');
                    self.setText1_1(_('REM'), '');
                }

                this.onQueue = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) return;
                    self.setText0_1(_('QUEUED') + ': ' + _('SEQ#') + transaction.data.seq);
                }

                this.afterPullQueue = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) return;
                    self.setText0_1(_('PULLED') + ': ' + _('SEQ#') + transaction.data.seq);
                }

                this.afterSubmit = function(evt) {
                    var transaction = evt.data;
                    if (transaction == null) {
                        self.setText0_0(_('TAL'), self.format(0));
                        return;
                    }
                    if (transaction.data != null && transaction.data.status == 1) {
                        self.setText0_0(_('TAL'), transaction.getTotal(true));
                        self.setText1_0(_('PAY'), transaction.getPaymentSubtotal(true));
                        self.setText1_1(_('CHG'), self.format(0-transaction.getRemainTotal(false)));
                        self.setText0_1(_('Sale Completed'));
                    }
                }

                this.onEnterPassword = function(evt) {
                    self.hideInput = true;
                    this.onClear();

                    if (self._inputController) {
                        self._inputController.type = 'password';
                    }
                }

                this.onExitPassword = function(evt) {
                    self.hideInput = false;
                    this.onClear();

                    if (self._inputController) {
                        self._inputController.type = 'textbox';
                    }

                }

                this.format = function(number) {
                    self.roundPrecision = GeckoJS.Configure.read('vivipos.fec.settings.PrecisionPrices') || 0;

                    var options = {
                        places: ((self.roundPrecision>0)? self.roundPrecision : 0)
                    };
                    // format display precision
                    return GeckoJS.NumberHelper.format(number, options);

                }

                this.onWarning = function(evt) {
                    self.setText0_1(evt.data);
                }
                this.keypadevents.addListener('onAddBuffer', this.onAddBuffer, this);
                this.keypadevents.addListener('onClearBuffer', this.onClearBuffer, this);

                this.cartevents.addListener('onGetSubtotal', this.onGetSubtotal, this);
                this.cartevents.addListener('onSetQty', this.onSetQty, this);
                this.cartevents.addListener('onClear', this.onClear, this);
                this.cartevents.addListener('afterCancel', this.afterCancel, this);
                this.cartevents.addListener('afterSubmit', this.afterSubmit, this);
                this.cartevents.addListener('onWarning', this.onWarning, this);

                this.cartQueueEvents.addListener('onQueue', this.onQueue, this);
                this.cartQueueEvents.addListener('afterPullQueue', this.afterPullQueue, this);

                this.mainevents.addListener('onEnterPassword', this.onEnterPassword, this);
                this.mainevents.addListener('onExitPassword', this.onExitPassword, this);

                // add Observer for startTrainingMode event.
                this.observer = GeckoJS.Observer.newInstance( {
                    topics: [ "TrainingMode" ],

                    observe: function( aSubject, aTopic, aData ) {
                        switch(aTopic) {
                            case 'TrainingMode':
                                if ( aData == "start" ) {
                                    self.switchTrainingMode( true );
                                } else if ( aData == "exit" ) {
                                    self.switchTrainingMode( false );
                                }
                                break;
                        }
                    }
                } ).register();

                self.roundPrecision = GeckoJS.Configure.read('vivipos.fec.settings.PrecisionPrices') || 0;
                self.onClear({data: null});

                this.ready = function() {
                    self._inputController = document.getElementById(self.getAttribute('inputController'));
                }
                window.addEventListener('load', this.ready, true);

            ]]>
            </constructor>

            <destructor>
            <![CDATA[
                if (this.keypadevents) {
                    this.keypadevents.removeListener('onAddBuffer', this.onAddBuffer);
                    this.keypadevents.removeListener('onClearBuffer', this.onAddBuffer);
                }
                if (this.cartevents) {
                    this.cartevents.removeListener('onGetSubtotal', this.onGetSubtotal);
                    this.cartevents.removeListener('onReturnSingle', this.onReturnSingle);
                    this.cartevents.removeListener('onReturnAll', this.onReturnAll);
                    this.cartevents.removeListener('onReturnCleared', this.onReturnCleared);

                    this.cartevents.removeListener('onSetQty', this.onSetQty);
                    this.cartevents.removeListener('onClear', this.onClear);
                    this.cartevents.removeListener('afterCancel', this.afterCancel);
                    this.cartevents.removeListener('afterSubmit', this.afterSubmit);
                    this.cartevents.removeListener('onWarning', this.onWarning);
                }
                if (this.cartQueueEvents){
                    this.cartQueueEvents.removeListener('onQueue', this.onQueue);
                    this.cartQueueEvents.removeListener('afterPullQueue', this.afterPullQueue);
                }
                if (this.mainevents) {
                    this.mainevents.removeListener('onEnterPassword', this.onEnterPassword);
                    this.mainevents.removeListener('onExitPassword', this.onExitPassword, this);
                }

                this.observer.unregister();

                window.removeEventListener('load', this.ready, true);

            ]]>
            </destructor>

            <xbl:method name="_detectFontWidth">
                <xbl:parameter name="target"/>
                <xbl:body>
                <![CDATA[
                    var h = document.getAnonymousElementByAttribute(this, "anonid", "detectFontWidthContainer");
                    var d = document.createElementNS("http://www.w3.org/1999/xhtml","html:div");
                    var s = document.createElementNS("http://www.w3.org/1999/xhtml","html:span");
                    var fontWidth = 0;

                    h.style.display = "block";
                    h.setAttribute('class', target.getAttribute('class'));
                    d.appendChild(s);
                    s.textContent       = "0123456789ABCDEF";
                    h.appendChild(d);
                    var defaultWidth   = s.offsetWidth;

                    // remove fontDetectContainer
                    h.removeChild(d);

                    h.style.display = "none";

                    fontWidth = Math.floor(defaultWidth/16);
                    return fontWidth;
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="_cropText">
                <xbl:parameter name="text"/>
                <xbl:parameter name="container"/>
                <xbl:parameter name="fontWidth"/>
                <xbl:body>
                <![CDATA[
                    var input = document.getAnonymousElementByAttribute(container, "class", "textbox-input");

                    var textWidth = text.length * fontWidth;
                    var innerWidth = input.clientWidth;

                    // need to account for left and right padding
                    var leftPadding = $(input).css('padding-left').replace('px', '', 'g');
                    var rightPadding = $(input).css('padding-right').replace('px', '', 'g');
                    var displayWidth = innerWidth - leftPadding - rightPadding;

                    if (textWidth > displayWidth) {
                        var maxlen = parseInt(displayWidth / fontWidth);
                        text = text.substr(0, maxlen - 4) + "..." + text.substr(text.length - 1, 1);
                    }

                    return text;
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="switchTrainingMode">
                <xbl:parameter name="isTraining"/>
                <xbl:body>
                <![CDATA[
                    var classStr = this.getAttribute('class');
                    var trainingClass = this.getAttribute('trainingClass') || 'vfd-pad-training';
                    //GREUtils.log( 'in switchTrainingMode: ' + classStr);
                    if (isTraining) {
                        // if class doesn't contain trainingClass, append it
                        if (!GeckoJS.String.contains(classStr, trainingClass)) {
                            classStr += ' ' + trainingClass;
                            this.className = classStr;
                        }
                    }
                    else {
                        // if class contains trainingClass, remove it
                        if (GeckoJS.String.contains(classStr, trainingClass)) {
                            classStr = GeckoJS.String.trim(classStr.replace(trainingClass, '', 'g'));
                            this.className = classStr;
                        }
                    }
                ]]>
                </xbl:body>
            </xbl:method>

            <xbl:method name="setText0_0">
                <xbl:parameter name="label"/>
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    val = this._cropText(val, this._label0_0_value, this._fontWidth0_0);
                    this._label0_0_label.value = label;
                    this._label0_0_value.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText0_1">
                <xbl:parameter name="val"/>
                <xbl:parameter name="keypad"/>
                <xbl:body>
                <![CDATA[

                    this._fromKeypad = keypad;

                    val = this._cropText(val, this._label0_1_value, this._fontWidth0_1);
                    this._label0_1_value.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText1_0">
                <xbl:parameter name="label"/>
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    val = this._cropText(val, this._label1_0_value, this._fontWidth1_0);
                    this._label1_0_label.value = label;
                    this._label1_0_value.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
            <xbl:method name="setText1_1">
                <xbl:parameter name="label"/>
                <xbl:parameter name="val"/>
                <xbl:body>
                <![CDATA[

                    if (this.hideInput) {
                        var newval = '';
                        for (var i = 0; i < val.length; i++) newval += '*';
                        val = newval;
                    }

                    val = this._cropText(val, this._label1_1_value, this._fontWidth1_1);
                    this._label1_1_label.value = label;
                    this._label1_1_value.value = val;
                ]]>
                </xbl:body>
            </xbl:method>
        </xbl:implementation>

    </binding>

</bindings>
